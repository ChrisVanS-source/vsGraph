#include "qgraph_operation.h"
#include "qimmhss.h"

//${begin}
void graph_op_traits<__m512d>::equal_scalar(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m512d>::equal(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m512d>::squareroot(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sqrt_pd(x);
}

void graph_op_traits<__m512d>::change_sign(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(_mm512_set1_pd(0.0),x);
}

void graph_op_traits<__m512d>::ceiling(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_ceil_pd(x);
}

void graph_op_traits<__m512d>::flooring(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_floor_pd(x);
}

void graph_op_traits<__m512d>::heaviside_step(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_hss_pd(x);
}

void graph_op_traits<__m512d>::exponential(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_exp_pd(x);
}

void graph_op_traits<__m512d>::logarithm(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log_pd(x);
}

void graph_op_traits<__m512d>::logarithm2(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log2_pd(x);
}

void graph_op_traits<__m512d>::logarithm10(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log10_pd(x);
}

void graph_op_traits<__m512d>::complementary_errorfunc(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_erfc_pd(x);
}

void graph_op_traits<__m512d>::sine(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sin_pd(x);
}

void graph_op_traits<__m512d>::cosine(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_cos_pd(x);
}

void graph_op_traits<__m512d>::tangent(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_tan_pd(x);
}

void graph_op_traits<__m512d>::arc_sine(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_asin_pd(x);
}

void graph_op_traits<__m512d>::arc_cosine(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_acos_pd(x);
}

void graph_op_traits<__m512d>::arc_tangent(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_atan_pd(x);
}

void graph_op_traits<__m512d>::hyperbolic_sine(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sinh_pd(x);
}

void graph_op_traits<__m512d>::hyperbolic_cosine(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_cosh_pd(x);
}

void graph_op_traits<__m512d>::hyperbolic_tangent(__m512d& r, const __m512d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_tanh_pd(x);
}

void graph_op_traits<__m512d>::add(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_pd(x,y);
}

void graph_op_traits<__m512d>::subtract(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(x,y);
}

void graph_op_traits<__m512d>::multiply(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_pd(x,y);
}

void graph_op_traits<__m512d>::divide(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_pd(x,y);
}

void graph_op_traits<__m512d>::maximum(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_pd(x,y);
}

void graph_op_traits<__m512d>::minimum(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_pd(x,y);
}

void graph_op_traits<__m512d>::power(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_pd(x,y);
}

void graph_op_traits<__m512d>::add_scalar(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_pd(x,y);
}

void graph_op_traits<__m512d>::subtract_scalar(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(x,y);
}

void graph_op_traits<__m512d>::scalar_subtract(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(x,y);
}

void graph_op_traits<__m512d>::multiply_scalar(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_pd(x,y);
}

void graph_op_traits<__m512d>::divide_scalar(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_pd(x,y);
}

void graph_op_traits<__m512d>::scalar_divide(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_pd(x,y);
}

void graph_op_traits<__m512d>::maximum_scalar(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_pd(x,y);
}

void graph_op_traits<__m512d>::minimum_scalar(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_pd(x,y);
}

void graph_op_traits<__m512d>::power_scalar(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_pd(x,y);
}

void graph_op_traits<__m512d>::scalar_power(__m512d& r, const __m512d& x, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_pd(x,y);
}

void graph_op_traits<__m512d>::equal_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=x;
	dr=dx;
}

void graph_op_traits<__m512d>::squareroot_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sqrt_pd(x);
	dr=_mm512_div_pd(_mm512_mul_pd(dx,_mm512_set1_pd(0.5)),r);
}

void graph_op_traits<__m512d>::change_sign_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(_mm512_set1_pd(0.0),x);
	dr=_mm512_sub_pd(_mm512_set1_pd(0.0),dx);
}

void graph_op_traits<__m512d>::ceiling_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_ceil_pd(x);
	dr=_mm512_set1_pd(0.0);
}

void graph_op_traits<__m512d>::flooring_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_floor_pd(x);
	dr=_mm512_set1_pd(0.0);
}

void graph_op_traits<__m512d>::heaviside_step_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_hss_pd(x);
	dr=_mm512_set1_pd(0.0);
}

void graph_op_traits<__m512d>::exponential_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_exp_pd(x);
	dr=_mm512_mul_pd(r,dx);
}

void graph_op_traits<__m512d>::logarithm_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log_pd(x);
	dr=_mm512_div_pd(dx,x);
}

void graph_op_traits<__m512d>::logarithm2_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log2_pd(x);
	dr=_mm512_div_pd(dx,_mm512_mul_pd(x,_mm512_set1_pd(0.69314718055994529)));
}

void graph_op_traits<__m512d>::logarithm10_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log10_pd(x);
	dr=_mm512_div_pd(dx,_mm512_mul_pd(x,_mm512_set1_pd(2.3025850929940459)));
}

void graph_op_traits<__m512d>::complementary_errorfunc_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_erfc_pd(x);
	dr=_mm512_sub_pd(_mm512_set1_pd(0.0),_mm512_mul_pd(_mm512_mul_pd(_mm512_exp_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),x),x)),_mm512_set1_pd(1.1283791670955126)),dx));
}

void graph_op_traits<__m512d>::sine_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sin_pd(x);
	dr=_mm512_mul_pd(_mm512_cos_pd(x),dx);
}

void graph_op_traits<__m512d>::cosine_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_cos_pd(x);
	dr=_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),_mm512_sin_pd(x)),dx);
}

void graph_op_traits<__m512d>::tangent_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_tan_pd(x);
	dr=_mm512_div_pd(dx,_mm512_mul_pd(_mm512_cos_pd(x),_mm512_cos_pd(x)));
}

void graph_op_traits<__m512d>::arc_sine_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_asin_pd(x);
	dr=_mm512_div_pd(dx,_mm512_sqrt_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(x,x))));
}

void graph_op_traits<__m512d>::arc_cosine_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_acos_pd(x);
	dr=_mm512_div_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),dx),_mm512_sqrt_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(x,x))));
}

void graph_op_traits<__m512d>::arc_tangent_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_atan_pd(x);
	dr=_mm512_div_pd(dx,_mm512_add_pd(_mm512_mul_pd(x,x),_mm512_set1_pd(1.0)));
}

void graph_op_traits<__m512d>::hyperbolic_sine_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sinh_pd(x);
	dr=_mm512_mul_pd(_mm512_cosh_pd(x),dx);
}

void graph_op_traits<__m512d>::hyperbolic_cosine_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_cosh_pd(x);
	dr=_mm512_mul_pd(_mm512_sinh_pd(x),dx);
}

void graph_op_traits<__m512d>::hyperbolic_tangent_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_tanh_pd(x);
	dr=_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(r,r)),dx);
}

void graph_op_traits<__m512d>::add_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_pd(x,y);
	dr=_mm512_add_pd(dx,dy);
}

void graph_op_traits<__m512d>::add_px_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_pd(x,y);
	dr=dy;
}

void graph_op_traits<__m512d>::add_py_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m512d>::subtract_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(x,y);
	dr=_mm512_sub_pd(dx,dy);
}

void graph_op_traits<__m512d>::subtract_px_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(x,y);
	dr=_mm512_sub_pd(_mm512_set1_pd(0.0),dy);
}

void graph_op_traits<__m512d>::subtract_py_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m512d>::multiply_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_pd(x,y);
	dr=_mm512_add_pd(_mm512_mul_pd(y,dx),_mm512_mul_pd(x,dy));
}

void graph_op_traits<__m512d>::multiply_px_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_pd(x,y);
	dr=_mm512_mul_pd(x,dy);
}

void graph_op_traits<__m512d>::multiply_py_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_pd(x,y);
	dr=_mm512_mul_pd(y,dx);
}

void graph_op_traits<__m512d>::divide_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_pd(x,y);
	dr=_mm512_div_pd(_mm512_sub_pd(dx,_mm512_mul_pd(r,dy)),y);
}

void graph_op_traits<__m512d>::divide_px_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_pd(x,y);
	dr=_mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),dy),y);
}

void graph_op_traits<__m512d>::divide_py_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_pd(x,y);
	dr=_mm512_div_pd(dx,y);
}

void graph_op_traits<__m512d>::maximum_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_pd(x,y);
	dr=_mm512_add_pd(_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dx),_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dy));
}

void graph_op_traits<__m512d>::maximum_px_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_pd(x,y);
	dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dy);
}

void graph_op_traits<__m512d>::maximum_py_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_pd(x,y);
	dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dx);
}

void graph_op_traits<__m512d>::minimum_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_pd(x,y);
	dr=_mm512_add_pd(_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dx),_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dy));
}

void graph_op_traits<__m512d>::minimum_px_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_pd(x,y);
	dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dy);
}

void graph_op_traits<__m512d>::minimum_py_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_pd(x,y);
	dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dx);
}

void graph_op_traits<__m512d>::power_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_pd(x,y);
	dr=_mm512_add_pd(_mm512_mul_pd(_mm512_mul_pd(_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0))),y),dx),_mm512_mul_pd(_mm512_mul_pd(_mm512_log_pd(x),r),dy));
}

void graph_op_traits<__m512d>::power_px_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_pd(x,y);
	dr=_mm512_mul_pd(_mm512_mul_pd(_mm512_log_pd(x),r),dy);
}

void graph_op_traits<__m512d>::power_py_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_pd(x,y);
	dr=_mm512_mul_pd(_mm512_mul_pd(_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0))),y),dx);
}

void graph_op_traits<__m512d>::add_scalar_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m512d>::subtract_scalar_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m512d>::scalar_subtract_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_pd(x,y);
	dr=_mm512_sub_pd(_mm512_set1_pd(0.0),dy);
}

void graph_op_traits<__m512d>::multiply_scalar_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_pd(x,y);
	dr=_mm512_mul_pd(y,dx);
}

void graph_op_traits<__m512d>::divide_scalar_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_pd(x,y);
	dr=_mm512_div_pd(dx,y);
}

void graph_op_traits<__m512d>::scalar_divide_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_pd(x,y);
	dr=_mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),dy),y);
}

void graph_op_traits<__m512d>::maximum_scalar_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_pd(x,y);
	dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dx);
}

void graph_op_traits<__m512d>::minimum_scalar_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_pd(x,y);
	dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dx);
}

void graph_op_traits<__m512d>::power_scalar_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& dx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_pd(x,y);
	dr=_mm512_mul_pd(_mm512_mul_pd(_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0))),y),dx);
}

void graph_op_traits<__m512d>::scalar_power_forward(__m512d& r, __m512d& dr, const __m512d& x, const __m512d& y, const __m512d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_pd(x,y);
	dr=_mm512_mul_pd(_mm512_mul_pd(_mm512_log_pd(x),r),dy);
}

void graph_op_traits<__m512d>::equal_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, wr);
}

void graph_op_traits<__m512d>::squareroot_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(_mm512_mul_pd(wr,_mm512_set1_pd(0.5)),r));
}

void graph_op_traits<__m512d>::change_sign_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_sub_pd(wx, wr);
}

void graph_op_traits<__m512d>::exponential_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,r));
}

void graph_op_traits<__m512d>::logarithm_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,x));
}

void graph_op_traits<__m512d>::logarithm2_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_mul_pd(x,_mm512_set1_pd(0.69314718055994529))));
}

void graph_op_traits<__m512d>::logarithm10_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_mul_pd(x,_mm512_set1_pd(2.3025850929940459))));
}

void graph_op_traits<__m512d>::complementary_errorfunc_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_sub_pd(wx, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_exp_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),x),x))),_mm512_set1_pd(1.1283791670955126)));
}

void graph_op_traits<__m512d>::sine_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,_mm512_cos_pd(x)));
}

void graph_op_traits<__m512d>::cosine_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),wr),_mm512_sin_pd(x)));
}

void graph_op_traits<__m512d>::tangent_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_mul_pd(_mm512_cos_pd(x),_mm512_cos_pd(x))));
}

void graph_op_traits<__m512d>::arc_sine_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_sqrt_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(x,x)))));
}

void graph_op_traits<__m512d>::arc_cosine_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),wr),_mm512_sqrt_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(x,x)))));
}

void graph_op_traits<__m512d>::arc_tangent_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_add_pd(_mm512_mul_pd(x,x),_mm512_set1_pd(1.0))));
}

void graph_op_traits<__m512d>::hyperbolic_sine_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,_mm512_cosh_pd(x)));
}

void graph_op_traits<__m512d>::hyperbolic_cosine_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,_mm512_sinh_pd(x)));
}

void graph_op_traits<__m512d>::hyperbolic_tangent_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(r,r))));
}

void graph_op_traits<__m512d>::add_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, wr);
	wy=_mm512_add_pd(wy, wr);
}

void graph_op_traits<__m512d>::add_px_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_pd(wy, wr);
}

void graph_op_traits<__m512d>::add_py_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, wr);
}

void graph_op_traits<__m512d>::subtract_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, wr);
	wy=_mm512_sub_pd(wy, wr);
}

void graph_op_traits<__m512d>::subtract_px_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_sub_pd(wy, wr);
}

void graph_op_traits<__m512d>::subtract_py_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, wr);
}

void graph_op_traits<__m512d>::multiply_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(y,wr));
	wy=_mm512_add_pd(wy, _mm512_mul_pd(x,wr));
}

void graph_op_traits<__m512d>::multiply_px_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_pd(wy, _mm512_mul_pd(x,wr));
}

void graph_op_traits<__m512d>::multiply_py_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(y,wr));
}

void graph_op_traits<__m512d>::divide_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,y));
	wy=_mm512_add_pd(wy, _mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m512d>::divide_px_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_pd(wy, _mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m512d>::divide_py_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,y));
}

void graph_op_traits<__m512d>::maximum_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
	wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
}

void graph_op_traits<__m512d>::maximum_px_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
}

void graph_op_traits<__m512d>::maximum_py_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
}

void graph_op_traits<__m512d>::minimum_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
	wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
}

void graph_op_traits<__m512d>::minimum_px_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
}

void graph_op_traits<__m512d>::minimum_py_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
}

void graph_op_traits<__m512d>::power_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0)))),y));
	wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_log_pd(x)),r));
}

void graph_op_traits<__m512d>::power_px_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_log_pd(x)),r));
}

void graph_op_traits<__m512d>::power_py_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0)))),y));
}

void graph_op_traits<__m512d>::add_scalar_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, wr);
}

void graph_op_traits<__m512d>::subtract_scalar_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, wr);
}

void graph_op_traits<__m512d>::scalar_subtract_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_sub_pd(wy, wr);
}

void graph_op_traits<__m512d>::multiply_scalar_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(y,wr));
}

void graph_op_traits<__m512d>::divide_scalar_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_div_pd(wr,y));
}

void graph_op_traits<__m512d>::scalar_divide_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_pd(wy, _mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m512d>::maximum_scalar_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
}

void graph_op_traits<__m512d>::minimum_scalar_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
}

void graph_op_traits<__m512d>::power_scalar_backward(const __m512d& r, const __m512d& wr, const __m512d& x, __m512d& wx, const __m512d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_mul_pd(_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0))),y),wr));
}

void graph_op_traits<__m512d>::scalar_power_backward(const __m512d& r, const __m512d& wr, const __m512d& x, const __m512d& y, __m512d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_mul_pd(_mm512_log_pd(x),r),wr));
}

void graph_op_traits<__m256d>::equal_scalar(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m256d>::equal(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m256d>::squareroot(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sqrt_pd(x);
}

void graph_op_traits<__m256d>::change_sign(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(_mm256_set1_pd(0.0),x);
}

void graph_op_traits<__m256d>::ceiling(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_ceil_pd(x);
}

void graph_op_traits<__m256d>::flooring(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_floor_pd(x);
}

void graph_op_traits<__m256d>::heaviside_step(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_hss_pd(x);
}

void graph_op_traits<__m256d>::exponential(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_exp_pd(x);
}

void graph_op_traits<__m256d>::logarithm(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log_pd(x);
}

void graph_op_traits<__m256d>::logarithm2(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log2_pd(x);
}

void graph_op_traits<__m256d>::logarithm10(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log10_pd(x);
}

void graph_op_traits<__m256d>::complementary_errorfunc(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_erfc_pd(x);
}

void graph_op_traits<__m256d>::sine(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sin_pd(x);
}

void graph_op_traits<__m256d>::cosine(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_cos_pd(x);
}

void graph_op_traits<__m256d>::tangent(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_tan_pd(x);
}

void graph_op_traits<__m256d>::arc_sine(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_asin_pd(x);
}

void graph_op_traits<__m256d>::arc_cosine(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_acos_pd(x);
}

void graph_op_traits<__m256d>::arc_tangent(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_atan_pd(x);
}

void graph_op_traits<__m256d>::hyperbolic_sine(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sinh_pd(x);
}

void graph_op_traits<__m256d>::hyperbolic_cosine(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_cosh_pd(x);
}

void graph_op_traits<__m256d>::hyperbolic_tangent(__m256d& r, const __m256d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_tanh_pd(x);
}

void graph_op_traits<__m256d>::add(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_pd(x,y);
}

void graph_op_traits<__m256d>::subtract(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(x,y);
}

void graph_op_traits<__m256d>::multiply(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_pd(x,y);
}

void graph_op_traits<__m256d>::divide(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_pd(x,y);
}

void graph_op_traits<__m256d>::maximum(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_pd(x,y);
}

void graph_op_traits<__m256d>::minimum(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_pd(x,y);
}

void graph_op_traits<__m256d>::power(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_pd(x,y);
}

void graph_op_traits<__m256d>::add_scalar(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_pd(x,y);
}

void graph_op_traits<__m256d>::subtract_scalar(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(x,y);
}

void graph_op_traits<__m256d>::scalar_subtract(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(x,y);
}

void graph_op_traits<__m256d>::multiply_scalar(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_pd(x,y);
}

void graph_op_traits<__m256d>::divide_scalar(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_pd(x,y);
}

void graph_op_traits<__m256d>::scalar_divide(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_pd(x,y);
}

void graph_op_traits<__m256d>::maximum_scalar(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_pd(x,y);
}

void graph_op_traits<__m256d>::minimum_scalar(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_pd(x,y);
}

void graph_op_traits<__m256d>::power_scalar(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_pd(x,y);
}

void graph_op_traits<__m256d>::scalar_power(__m256d& r, const __m256d& x, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_pd(x,y);
}

void graph_op_traits<__m256d>::equal_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=x;
	dr=dx;
}

void graph_op_traits<__m256d>::squareroot_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sqrt_pd(x);
	dr=_mm256_div_pd(_mm256_mul_pd(dx,_mm256_set1_pd(0.5)),r);
}

void graph_op_traits<__m256d>::change_sign_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(_mm256_set1_pd(0.0),x);
	dr=_mm256_sub_pd(_mm256_set1_pd(0.0),dx);
}

void graph_op_traits<__m256d>::ceiling_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_ceil_pd(x);
	dr=_mm256_set1_pd(0.0);
}

void graph_op_traits<__m256d>::flooring_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_floor_pd(x);
	dr=_mm256_set1_pd(0.0);
}

void graph_op_traits<__m256d>::heaviside_step_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_hss_pd(x);
	dr=_mm256_set1_pd(0.0);
}

void graph_op_traits<__m256d>::exponential_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_exp_pd(x);
	dr=_mm256_mul_pd(r,dx);
}

void graph_op_traits<__m256d>::logarithm_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log_pd(x);
	dr=_mm256_div_pd(dx,x);
}

void graph_op_traits<__m256d>::logarithm2_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log2_pd(x);
	dr=_mm256_div_pd(dx,_mm256_mul_pd(x,_mm256_set1_pd(0.69314718055994529)));
}

void graph_op_traits<__m256d>::logarithm10_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log10_pd(x);
	dr=_mm256_div_pd(dx,_mm256_mul_pd(x,_mm256_set1_pd(2.3025850929940459)));
}

void graph_op_traits<__m256d>::complementary_errorfunc_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_erfc_pd(x);
	dr=_mm256_sub_pd(_mm256_set1_pd(0.0),_mm256_mul_pd(_mm256_mul_pd(_mm256_exp_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),x),x)),_mm256_set1_pd(1.1283791670955126)),dx));
}

void graph_op_traits<__m256d>::sine_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sin_pd(x);
	dr=_mm256_mul_pd(_mm256_cos_pd(x),dx);
}

void graph_op_traits<__m256d>::cosine_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_cos_pd(x);
	dr=_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),_mm256_sin_pd(x)),dx);
}

void graph_op_traits<__m256d>::tangent_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_tan_pd(x);
	dr=_mm256_div_pd(dx,_mm256_mul_pd(_mm256_cos_pd(x),_mm256_cos_pd(x)));
}

void graph_op_traits<__m256d>::arc_sine_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_asin_pd(x);
	dr=_mm256_div_pd(dx,_mm256_sqrt_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(x,x))));
}

void graph_op_traits<__m256d>::arc_cosine_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_acos_pd(x);
	dr=_mm256_div_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),dx),_mm256_sqrt_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(x,x))));
}

void graph_op_traits<__m256d>::arc_tangent_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_atan_pd(x);
	dr=_mm256_div_pd(dx,_mm256_add_pd(_mm256_mul_pd(x,x),_mm256_set1_pd(1.0)));
}

void graph_op_traits<__m256d>::hyperbolic_sine_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sinh_pd(x);
	dr=_mm256_mul_pd(_mm256_cosh_pd(x),dx);
}

void graph_op_traits<__m256d>::hyperbolic_cosine_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_cosh_pd(x);
	dr=_mm256_mul_pd(_mm256_sinh_pd(x),dx);
}

void graph_op_traits<__m256d>::hyperbolic_tangent_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_tanh_pd(x);
	dr=_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(r,r)),dx);
}

void graph_op_traits<__m256d>::add_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_pd(x,y);
	dr=_mm256_add_pd(dx,dy);
}

void graph_op_traits<__m256d>::add_px_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_pd(x,y);
	dr=dy;
}

void graph_op_traits<__m256d>::add_py_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m256d>::subtract_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(x,y);
	dr=_mm256_sub_pd(dx,dy);
}

void graph_op_traits<__m256d>::subtract_px_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(x,y);
	dr=_mm256_sub_pd(_mm256_set1_pd(0.0),dy);
}

void graph_op_traits<__m256d>::subtract_py_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m256d>::multiply_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_pd(x,y);
	dr=_mm256_add_pd(_mm256_mul_pd(y,dx),_mm256_mul_pd(x,dy));
}

void graph_op_traits<__m256d>::multiply_px_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_pd(x,y);
	dr=_mm256_mul_pd(x,dy);
}

void graph_op_traits<__m256d>::multiply_py_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_pd(x,y);
	dr=_mm256_mul_pd(y,dx);
}

void graph_op_traits<__m256d>::divide_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_pd(x,y);
	dr=_mm256_div_pd(_mm256_sub_pd(dx,_mm256_mul_pd(r,dy)),y);
}

void graph_op_traits<__m256d>::divide_px_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_pd(x,y);
	dr=_mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),dy),y);
}

void graph_op_traits<__m256d>::divide_py_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_pd(x,y);
	dr=_mm256_div_pd(dx,y);
}

void graph_op_traits<__m256d>::maximum_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_pd(x,y);
	dr=_mm256_add_pd(_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dx),_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dy));
}

void graph_op_traits<__m256d>::maximum_px_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_pd(x,y);
	dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dy);
}

void graph_op_traits<__m256d>::maximum_py_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_pd(x,y);
	dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dx);
}

void graph_op_traits<__m256d>::minimum_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_pd(x,y);
	dr=_mm256_add_pd(_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dx),_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dy));
}

void graph_op_traits<__m256d>::minimum_px_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_pd(x,y);
	dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dy);
}

void graph_op_traits<__m256d>::minimum_py_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_pd(x,y);
	dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dx);
}

void graph_op_traits<__m256d>::power_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_pd(x,y);
	dr=_mm256_add_pd(_mm256_mul_pd(_mm256_mul_pd(_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0))),y),dx),_mm256_mul_pd(_mm256_mul_pd(_mm256_log_pd(x),r),dy));
}

void graph_op_traits<__m256d>::power_px_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_pd(x,y);
	dr=_mm256_mul_pd(_mm256_mul_pd(_mm256_log_pd(x),r),dy);
}

void graph_op_traits<__m256d>::power_py_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_pd(x,y);
	dr=_mm256_mul_pd(_mm256_mul_pd(_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0))),y),dx);
}

void graph_op_traits<__m256d>::add_scalar_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m256d>::subtract_scalar_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m256d>::scalar_subtract_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_pd(x,y);
	dr=_mm256_sub_pd(_mm256_set1_pd(0.0),dy);
}

void graph_op_traits<__m256d>::multiply_scalar_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_pd(x,y);
	dr=_mm256_mul_pd(y,dx);
}

void graph_op_traits<__m256d>::divide_scalar_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_pd(x,y);
	dr=_mm256_div_pd(dx,y);
}

void graph_op_traits<__m256d>::scalar_divide_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_pd(x,y);
	dr=_mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),dy),y);
}

void graph_op_traits<__m256d>::maximum_scalar_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_pd(x,y);
	dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dx);
}

void graph_op_traits<__m256d>::minimum_scalar_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_pd(x,y);
	dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dx);
}

void graph_op_traits<__m256d>::power_scalar_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& dx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_pd(x,y);
	dr=_mm256_mul_pd(_mm256_mul_pd(_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0))),y),dx);
}

void graph_op_traits<__m256d>::scalar_power_forward(__m256d& r, __m256d& dr, const __m256d& x, const __m256d& y, const __m256d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_pd(x,y);
	dr=_mm256_mul_pd(_mm256_mul_pd(_mm256_log_pd(x),r),dy);
}

void graph_op_traits<__m256d>::equal_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, wr);
}

void graph_op_traits<__m256d>::squareroot_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(_mm256_mul_pd(wr,_mm256_set1_pd(0.5)),r));
}

void graph_op_traits<__m256d>::change_sign_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_sub_pd(wx, wr);
}

void graph_op_traits<__m256d>::exponential_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,r));
}

void graph_op_traits<__m256d>::logarithm_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,x));
}

void graph_op_traits<__m256d>::logarithm2_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_mul_pd(x,_mm256_set1_pd(0.69314718055994529))));
}

void graph_op_traits<__m256d>::logarithm10_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_mul_pd(x,_mm256_set1_pd(2.3025850929940459))));
}

void graph_op_traits<__m256d>::complementary_errorfunc_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_sub_pd(wx, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_exp_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),x),x))),_mm256_set1_pd(1.1283791670955126)));
}

void graph_op_traits<__m256d>::sine_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,_mm256_cos_pd(x)));
}

void graph_op_traits<__m256d>::cosine_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),wr),_mm256_sin_pd(x)));
}

void graph_op_traits<__m256d>::tangent_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_mul_pd(_mm256_cos_pd(x),_mm256_cos_pd(x))));
}

void graph_op_traits<__m256d>::arc_sine_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_sqrt_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(x,x)))));
}

void graph_op_traits<__m256d>::arc_cosine_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),wr),_mm256_sqrt_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(x,x)))));
}

void graph_op_traits<__m256d>::arc_tangent_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_add_pd(_mm256_mul_pd(x,x),_mm256_set1_pd(1.0))));
}

void graph_op_traits<__m256d>::hyperbolic_sine_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,_mm256_cosh_pd(x)));
}

void graph_op_traits<__m256d>::hyperbolic_cosine_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,_mm256_sinh_pd(x)));
}

void graph_op_traits<__m256d>::hyperbolic_tangent_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(r,r))));
}

void graph_op_traits<__m256d>::add_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, wr);
	wy=_mm256_add_pd(wy, wr);
}

void graph_op_traits<__m256d>::add_px_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_pd(wy, wr);
}

void graph_op_traits<__m256d>::add_py_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, wr);
}

void graph_op_traits<__m256d>::subtract_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, wr);
	wy=_mm256_sub_pd(wy, wr);
}

void graph_op_traits<__m256d>::subtract_px_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_sub_pd(wy, wr);
}

void graph_op_traits<__m256d>::subtract_py_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, wr);
}

void graph_op_traits<__m256d>::multiply_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(y,wr));
	wy=_mm256_add_pd(wy, _mm256_mul_pd(x,wr));
}

void graph_op_traits<__m256d>::multiply_px_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_pd(wy, _mm256_mul_pd(x,wr));
}

void graph_op_traits<__m256d>::multiply_py_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(y,wr));
}

void graph_op_traits<__m256d>::divide_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,y));
	wy=_mm256_add_pd(wy, _mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m256d>::divide_px_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_pd(wy, _mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m256d>::divide_py_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,y));
}

void graph_op_traits<__m256d>::maximum_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
	wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
}

void graph_op_traits<__m256d>::maximum_px_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
}

void graph_op_traits<__m256d>::maximum_py_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
}

void graph_op_traits<__m256d>::minimum_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
	wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
}

void graph_op_traits<__m256d>::minimum_px_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
}

void graph_op_traits<__m256d>::minimum_py_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
}

void graph_op_traits<__m256d>::power_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0)))),y));
	wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_log_pd(x)),r));
}

void graph_op_traits<__m256d>::power_px_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_log_pd(x)),r));
}

void graph_op_traits<__m256d>::power_py_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0)))),y));
}

void graph_op_traits<__m256d>::add_scalar_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, wr);
}

void graph_op_traits<__m256d>::subtract_scalar_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, wr);
}

void graph_op_traits<__m256d>::scalar_subtract_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_sub_pd(wy, wr);
}

void graph_op_traits<__m256d>::multiply_scalar_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(y,wr));
}

void graph_op_traits<__m256d>::divide_scalar_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_div_pd(wr,y));
}

void graph_op_traits<__m256d>::scalar_divide_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_pd(wy, _mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m256d>::maximum_scalar_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
}

void graph_op_traits<__m256d>::minimum_scalar_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
}

void graph_op_traits<__m256d>::power_scalar_backward(const __m256d& r, const __m256d& wr, const __m256d& x, __m256d& wx, const __m256d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_mul_pd(_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0))),y),wr));
}

void graph_op_traits<__m256d>::scalar_power_backward(const __m256d& r, const __m256d& wr, const __m256d& x, const __m256d& y, __m256d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_mul_pd(_mm256_log_pd(x),r),wr));
}

void graph_op_traits<__m128d>::equal_scalar(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m128d>::equal(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m128d>::squareroot(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sqrt_pd(x);
}

void graph_op_traits<__m128d>::change_sign(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(_mm_set1_pd(0.0),x);
}

void graph_op_traits<__m128d>::ceiling(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_ceil_pd(x);
}

void graph_op_traits<__m128d>::flooring(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_floor_pd(x);
}

void graph_op_traits<__m128d>::heaviside_step(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_hss_pd(x);
}

void graph_op_traits<__m128d>::exponential(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_exp_pd(x);
}

void graph_op_traits<__m128d>::logarithm(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log_pd(x);
}

void graph_op_traits<__m128d>::logarithm2(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log2_pd(x);
}

void graph_op_traits<__m128d>::logarithm10(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log10_pd(x);
}

void graph_op_traits<__m128d>::complementary_errorfunc(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_erfc_pd(x);
}

void graph_op_traits<__m128d>::sine(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sin_pd(x);
}

void graph_op_traits<__m128d>::cosine(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_cos_pd(x);
}

void graph_op_traits<__m128d>::tangent(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_tan_pd(x);
}

void graph_op_traits<__m128d>::arc_sine(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_asin_pd(x);
}

void graph_op_traits<__m128d>::arc_cosine(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_acos_pd(x);
}

void graph_op_traits<__m128d>::arc_tangent(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_atan_pd(x);
}

void graph_op_traits<__m128d>::hyperbolic_sine(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sinh_pd(x);
}

void graph_op_traits<__m128d>::hyperbolic_cosine(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_cosh_pd(x);
}

void graph_op_traits<__m128d>::hyperbolic_tangent(__m128d& r, const __m128d& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_tanh_pd(x);
}

void graph_op_traits<__m128d>::add(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_pd(x,y);
}

void graph_op_traits<__m128d>::subtract(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(x,y);
}

void graph_op_traits<__m128d>::multiply(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_pd(x,y);
}

void graph_op_traits<__m128d>::divide(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_pd(x,y);
}

void graph_op_traits<__m128d>::maximum(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_pd(x,y);
}

void graph_op_traits<__m128d>::minimum(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_pd(x,y);
}

void graph_op_traits<__m128d>::power(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_pd(x,y);
}

void graph_op_traits<__m128d>::add_scalar(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_pd(x,y);
}

void graph_op_traits<__m128d>::subtract_scalar(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(x,y);
}

void graph_op_traits<__m128d>::scalar_subtract(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(x,y);
}

void graph_op_traits<__m128d>::multiply_scalar(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_pd(x,y);
}

void graph_op_traits<__m128d>::divide_scalar(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_pd(x,y);
}

void graph_op_traits<__m128d>::scalar_divide(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_pd(x,y);
}

void graph_op_traits<__m128d>::maximum_scalar(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_pd(x,y);
}

void graph_op_traits<__m128d>::minimum_scalar(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_pd(x,y);
}

void graph_op_traits<__m128d>::power_scalar(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_pd(x,y);
}

void graph_op_traits<__m128d>::scalar_power(__m128d& r, const __m128d& x, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_pd(x,y);
}

void graph_op_traits<__m128d>::equal_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=x;
	dr=dx;
}

void graph_op_traits<__m128d>::squareroot_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sqrt_pd(x);
	dr=_mm_div_pd(_mm_mul_pd(dx,_mm_set1_pd(0.5)),r);
}

void graph_op_traits<__m128d>::change_sign_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(_mm_set1_pd(0.0),x);
	dr=_mm_sub_pd(_mm_set1_pd(0.0),dx);
}

void graph_op_traits<__m128d>::ceiling_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_ceil_pd(x);
	dr=_mm_set1_pd(0.0);
}

void graph_op_traits<__m128d>::flooring_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_floor_pd(x);
	dr=_mm_set1_pd(0.0);
}

void graph_op_traits<__m128d>::heaviside_step_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_hss_pd(x);
	dr=_mm_set1_pd(0.0);
}

void graph_op_traits<__m128d>::exponential_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_exp_pd(x);
	dr=_mm_mul_pd(r,dx);
}

void graph_op_traits<__m128d>::logarithm_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log_pd(x);
	dr=_mm_div_pd(dx,x);
}

void graph_op_traits<__m128d>::logarithm2_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log2_pd(x);
	dr=_mm_div_pd(dx,_mm_mul_pd(x,_mm_set1_pd(0.69314718055994529)));
}

void graph_op_traits<__m128d>::logarithm10_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log10_pd(x);
	dr=_mm_div_pd(dx,_mm_mul_pd(x,_mm_set1_pd(2.3025850929940459)));
}

void graph_op_traits<__m128d>::complementary_errorfunc_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_erfc_pd(x);
	dr=_mm_sub_pd(_mm_set1_pd(0.0),_mm_mul_pd(_mm_mul_pd(_mm_exp_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),x),x)),_mm_set1_pd(1.1283791670955126)),dx));
}

void graph_op_traits<__m128d>::sine_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sin_pd(x);
	dr=_mm_mul_pd(_mm_cos_pd(x),dx);
}

void graph_op_traits<__m128d>::cosine_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_cos_pd(x);
	dr=_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),_mm_sin_pd(x)),dx);
}

void graph_op_traits<__m128d>::tangent_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_tan_pd(x);
	dr=_mm_div_pd(dx,_mm_mul_pd(_mm_cos_pd(x),_mm_cos_pd(x)));
}

void graph_op_traits<__m128d>::arc_sine_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_asin_pd(x);
	dr=_mm_div_pd(dx,_mm_sqrt_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(x,x))));
}

void graph_op_traits<__m128d>::arc_cosine_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_acos_pd(x);
	dr=_mm_div_pd(_mm_sub_pd(_mm_set1_pd(0.0),dx),_mm_sqrt_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(x,x))));
}

void graph_op_traits<__m128d>::arc_tangent_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_atan_pd(x);
	dr=_mm_div_pd(dx,_mm_add_pd(_mm_mul_pd(x,x),_mm_set1_pd(1.0)));
}

void graph_op_traits<__m128d>::hyperbolic_sine_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sinh_pd(x);
	dr=_mm_mul_pd(_mm_cosh_pd(x),dx);
}

void graph_op_traits<__m128d>::hyperbolic_cosine_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_cosh_pd(x);
	dr=_mm_mul_pd(_mm_sinh_pd(x),dx);
}

void graph_op_traits<__m128d>::hyperbolic_tangent_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_tanh_pd(x);
	dr=_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(r,r)),dx);
}

void graph_op_traits<__m128d>::add_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_pd(x,y);
	dr=_mm_add_pd(dx,dy);
}

void graph_op_traits<__m128d>::add_px_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_pd(x,y);
	dr=dy;
}

void graph_op_traits<__m128d>::add_py_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m128d>::subtract_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(x,y);
	dr=_mm_sub_pd(dx,dy);
}

void graph_op_traits<__m128d>::subtract_px_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(x,y);
	dr=_mm_sub_pd(_mm_set1_pd(0.0),dy);
}

void graph_op_traits<__m128d>::subtract_py_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m128d>::multiply_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_pd(x,y);
	dr=_mm_add_pd(_mm_mul_pd(y,dx),_mm_mul_pd(x,dy));
}

void graph_op_traits<__m128d>::multiply_px_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_pd(x,y);
	dr=_mm_mul_pd(x,dy);
}

void graph_op_traits<__m128d>::multiply_py_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_pd(x,y);
	dr=_mm_mul_pd(y,dx);
}

void graph_op_traits<__m128d>::divide_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_pd(x,y);
	dr=_mm_div_pd(_mm_sub_pd(dx,_mm_mul_pd(r,dy)),y);
}

void graph_op_traits<__m128d>::divide_px_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_pd(x,y);
	dr=_mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),dy),y);
}

void graph_op_traits<__m128d>::divide_py_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_pd(x,y);
	dr=_mm_div_pd(dx,y);
}

void graph_op_traits<__m128d>::maximum_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_pd(x,y);
	dr=_mm_add_pd(_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dx),_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dy));
}

void graph_op_traits<__m128d>::maximum_px_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_pd(x,y);
	dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dy);
}

void graph_op_traits<__m128d>::maximum_py_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_pd(x,y);
	dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dx);
}

void graph_op_traits<__m128d>::minimum_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_pd(x,y);
	dr=_mm_add_pd(_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dx),_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dy));
}

void graph_op_traits<__m128d>::minimum_px_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_pd(x,y);
	dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dy);
}

void graph_op_traits<__m128d>::minimum_py_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_pd(x,y);
	dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dx);
}

void graph_op_traits<__m128d>::power_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_pd(x,y);
	dr=_mm_add_pd(_mm_mul_pd(_mm_mul_pd(_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0))),y),dx),_mm_mul_pd(_mm_mul_pd(_mm_log_pd(x),r),dy));
}

void graph_op_traits<__m128d>::power_px_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_pd(x,y);
	dr=_mm_mul_pd(_mm_mul_pd(_mm_log_pd(x),r),dy);
}

void graph_op_traits<__m128d>::power_py_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_pd(x,y);
	dr=_mm_mul_pd(_mm_mul_pd(_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0))),y),dx);
}

void graph_op_traits<__m128d>::add_scalar_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m128d>::subtract_scalar_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(x,y);
	dr=dx;
}

void graph_op_traits<__m128d>::scalar_subtract_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_pd(x,y);
	dr=_mm_sub_pd(_mm_set1_pd(0.0),dy);
}

void graph_op_traits<__m128d>::multiply_scalar_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_pd(x,y);
	dr=_mm_mul_pd(y,dx);
}

void graph_op_traits<__m128d>::divide_scalar_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_pd(x,y);
	dr=_mm_div_pd(dx,y);
}

void graph_op_traits<__m128d>::scalar_divide_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_pd(x,y);
	dr=_mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),dy),y);
}

void graph_op_traits<__m128d>::maximum_scalar_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_pd(x,y);
	dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dx);
}

void graph_op_traits<__m128d>::minimum_scalar_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_pd(x,y);
	dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dx);
}

void graph_op_traits<__m128d>::power_scalar_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& dx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_pd(x,y);
	dr=_mm_mul_pd(_mm_mul_pd(_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0))),y),dx);
}

void graph_op_traits<__m128d>::scalar_power_forward(__m128d& r, __m128d& dr, const __m128d& x, const __m128d& y, const __m128d& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_pd(x,y);
	dr=_mm_mul_pd(_mm_mul_pd(_mm_log_pd(x),r),dy);
}

void graph_op_traits<__m128d>::equal_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, wr);
}

void graph_op_traits<__m128d>::squareroot_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(_mm_mul_pd(wr,_mm_set1_pd(0.5)),r));
}

void graph_op_traits<__m128d>::change_sign_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_sub_pd(wx, wr);
}

void graph_op_traits<__m128d>::exponential_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(wr,r));
}

void graph_op_traits<__m128d>::logarithm_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,x));
}

void graph_op_traits<__m128d>::logarithm2_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_mul_pd(x,_mm_set1_pd(0.69314718055994529))));
}

void graph_op_traits<__m128d>::logarithm10_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_mul_pd(x,_mm_set1_pd(2.3025850929940459))));
}

void graph_op_traits<__m128d>::complementary_errorfunc_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_sub_pd(wx, _mm_mul_pd(_mm_mul_pd(wr,_mm_exp_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),x),x))),_mm_set1_pd(1.1283791670955126)));
}

void graph_op_traits<__m128d>::sine_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(wr,_mm_cos_pd(x)));
}

void graph_op_traits<__m128d>::cosine_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),wr),_mm_sin_pd(x)));
}

void graph_op_traits<__m128d>::tangent_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_mul_pd(_mm_cos_pd(x),_mm_cos_pd(x))));
}

void graph_op_traits<__m128d>::arc_sine_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_sqrt_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(x,x)))));
}

void graph_op_traits<__m128d>::arc_cosine_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(_mm_sub_pd(_mm_set1_pd(0.0),wr),_mm_sqrt_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(x,x)))));
}

void graph_op_traits<__m128d>::arc_tangent_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_add_pd(_mm_mul_pd(x,x),_mm_set1_pd(1.0))));
}

void graph_op_traits<__m128d>::hyperbolic_sine_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(wr,_mm_cosh_pd(x)));
}

void graph_op_traits<__m128d>::hyperbolic_cosine_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(wr,_mm_sinh_pd(x)));
}

void graph_op_traits<__m128d>::hyperbolic_tangent_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(wr,_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(r,r))));
}

void graph_op_traits<__m128d>::add_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, wr);
	wy=_mm_add_pd(wy, wr);
}

void graph_op_traits<__m128d>::add_px_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_pd(wy, wr);
}

void graph_op_traits<__m128d>::add_py_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, wr);
}

void graph_op_traits<__m128d>::subtract_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, wr);
	wy=_mm_sub_pd(wy, wr);
}

void graph_op_traits<__m128d>::subtract_px_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_sub_pd(wy, wr);
}

void graph_op_traits<__m128d>::subtract_py_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, wr);
}

void graph_op_traits<__m128d>::multiply_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(y,wr));
	wy=_mm_add_pd(wy, _mm_mul_pd(x,wr));
}

void graph_op_traits<__m128d>::multiply_px_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_pd(wy, _mm_mul_pd(x,wr));
}

void graph_op_traits<__m128d>::multiply_py_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(y,wr));
}

void graph_op_traits<__m128d>::divide_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,y));
	wy=_mm_add_pd(wy, _mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m128d>::divide_px_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_pd(wy, _mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m128d>::divide_py_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,y));
}

void graph_op_traits<__m128d>::maximum_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
	wy=_mm_add_pd(wy, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
}

void graph_op_traits<__m128d>::maximum_px_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_pd(wy, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
}

void graph_op_traits<__m128d>::maximum_py_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
}

void graph_op_traits<__m128d>::minimum_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
	wy=_mm_add_pd(wy, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
}

void graph_op_traits<__m128d>::minimum_px_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_pd(wy, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
}

void graph_op_traits<__m128d>::minimum_py_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
}

void graph_op_traits<__m128d>::power_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_mul_pd(wr,_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0)))),y));
	wy=_mm_add_pd(wy, _mm_mul_pd(_mm_mul_pd(wr,_mm_log_pd(x)),r));
}

void graph_op_traits<__m128d>::power_px_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_pd(wy, _mm_mul_pd(_mm_mul_pd(wr,_mm_log_pd(x)),r));
}

void graph_op_traits<__m128d>::power_py_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_mul_pd(wr,_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0)))),y));
}

void graph_op_traits<__m128d>::add_scalar_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, wr);
}

void graph_op_traits<__m128d>::subtract_scalar_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, wr);
}

void graph_op_traits<__m128d>::scalar_subtract_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_sub_pd(wy, wr);
}

void graph_op_traits<__m128d>::multiply_scalar_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(y,wr));
}

void graph_op_traits<__m128d>::divide_scalar_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_div_pd(wr,y));
}

void graph_op_traits<__m128d>::scalar_divide_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_pd(wy, _mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),wr),y));
}

void graph_op_traits<__m128d>::maximum_scalar_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
}

void graph_op_traits<__m128d>::minimum_scalar_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
}

void graph_op_traits<__m128d>::power_scalar_backward(const __m128d& r, const __m128d& wr, const __m128d& x, __m128d& wx, const __m128d& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_pd(wx, _mm_mul_pd(_mm_mul_pd(_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0))),y),wr));
}

void graph_op_traits<__m128d>::scalar_power_backward(const __m128d& r, const __m128d& wr, const __m128d& x, const __m128d& y, __m128d& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_pd(wy, _mm_mul_pd(_mm_mul_pd(_mm_log_pd(x),r),wr));
}

void graph_op_traits<__m512>::equal_scalar(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m512>::equal(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m512>::squareroot(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sqrt_ps(x);
}

void graph_op_traits<__m512>::change_sign(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(_mm512_set1_ps(0.0),x);
}

void graph_op_traits<__m512>::ceiling(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_ceil_ps(x);
}

void graph_op_traits<__m512>::flooring(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_floor_ps(x);
}

void graph_op_traits<__m512>::heaviside_step(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_hss_ps(x);
}

void graph_op_traits<__m512>::exponential(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_exp_ps(x);
}

void graph_op_traits<__m512>::logarithm(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log_ps(x);
}

void graph_op_traits<__m512>::logarithm2(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log2_ps(x);
}

void graph_op_traits<__m512>::logarithm10(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log10_ps(x);
}

void graph_op_traits<__m512>::complementary_errorfunc(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_erfc_ps(x);
}

void graph_op_traits<__m512>::sine(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sin_ps(x);
}

void graph_op_traits<__m512>::cosine(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_cos_ps(x);
}

void graph_op_traits<__m512>::tangent(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_tan_ps(x);
}

void graph_op_traits<__m512>::arc_sine(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_asin_ps(x);
}

void graph_op_traits<__m512>::arc_cosine(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_acos_ps(x);
}

void graph_op_traits<__m512>::arc_tangent(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_atan_ps(x);
}

void graph_op_traits<__m512>::hyperbolic_sine(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sinh_ps(x);
}

void graph_op_traits<__m512>::hyperbolic_cosine(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_cosh_ps(x);
}

void graph_op_traits<__m512>::hyperbolic_tangent(__m512& r, const __m512& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_tanh_ps(x);
}

void graph_op_traits<__m512>::add(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_ps(x,y);
}

void graph_op_traits<__m512>::subtract(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(x,y);
}

void graph_op_traits<__m512>::multiply(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_ps(x,y);
}

void graph_op_traits<__m512>::divide(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_ps(x,y);
}

void graph_op_traits<__m512>::maximum(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_ps(x,y);
}

void graph_op_traits<__m512>::minimum(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_ps(x,y);
}

void graph_op_traits<__m512>::power(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_ps(x,y);
}

void graph_op_traits<__m512>::add_scalar(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_ps(x,y);
}

void graph_op_traits<__m512>::subtract_scalar(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(x,y);
}

void graph_op_traits<__m512>::scalar_subtract(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(x,y);
}

void graph_op_traits<__m512>::multiply_scalar(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_ps(x,y);
}

void graph_op_traits<__m512>::divide_scalar(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_ps(x,y);
}

void graph_op_traits<__m512>::scalar_divide(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_ps(x,y);
}

void graph_op_traits<__m512>::maximum_scalar(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_ps(x,y);
}

void graph_op_traits<__m512>::minimum_scalar(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_ps(x,y);
}

void graph_op_traits<__m512>::power_scalar(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_ps(x,y);
}

void graph_op_traits<__m512>::scalar_power(__m512& r, const __m512& x, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_ps(x,y);
}

void graph_op_traits<__m512>::equal_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=x;
	dr=dx;
}

void graph_op_traits<__m512>::squareroot_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sqrt_ps(x);
	dr=_mm512_div_ps(_mm512_mul_ps(dx,_mm512_set1_ps(0.5f)),r);
}

void graph_op_traits<__m512>::change_sign_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(_mm512_set1_ps(0.0),x);
	dr=_mm512_sub_ps(_mm512_set1_ps(0.0),dx);
}

void graph_op_traits<__m512>::ceiling_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_ceil_ps(x);
	dr=_mm512_set1_ps(0.0);
}

void graph_op_traits<__m512>::flooring_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_floor_ps(x);
	dr=_mm512_set1_ps(0.0);
}

void graph_op_traits<__m512>::heaviside_step_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_hss_ps(x);
	dr=_mm512_set1_ps(0.0);
}

void graph_op_traits<__m512>::exponential_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_exp_ps(x);
	dr=_mm512_mul_ps(r,dx);
}

void graph_op_traits<__m512>::logarithm_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log_ps(x);
	dr=_mm512_div_ps(dx,x);
}

void graph_op_traits<__m512>::logarithm2_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log2_ps(x);
	dr=_mm512_div_ps(dx,_mm512_mul_ps(x,_mm512_set1_ps(0.69314718055994529f)));
}

void graph_op_traits<__m512>::logarithm10_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_log10_ps(x);
	dr=_mm512_div_ps(dx,_mm512_mul_ps(x,_mm512_set1_ps(2.3025850929940459f)));
}

void graph_op_traits<__m512>::complementary_errorfunc_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_erfc_ps(x);
	dr=_mm512_sub_ps(_mm512_set1_ps(0.0),_mm512_mul_ps(_mm512_mul_ps(_mm512_exp_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),x),x)),_mm512_set1_ps(1.1283791670955126f)),dx));
}

void graph_op_traits<__m512>::sine_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sin_ps(x);
	dr=_mm512_mul_ps(_mm512_cos_ps(x),dx);
}

void graph_op_traits<__m512>::cosine_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_cos_ps(x);
	dr=_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),_mm512_sin_ps(x)),dx);
}

void graph_op_traits<__m512>::tangent_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_tan_ps(x);
	dr=_mm512_div_ps(dx,_mm512_mul_ps(_mm512_cos_ps(x),_mm512_cos_ps(x)));
}

void graph_op_traits<__m512>::arc_sine_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_asin_ps(x);
	dr=_mm512_div_ps(dx,_mm512_sqrt_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(x,x))));
}

void graph_op_traits<__m512>::arc_cosine_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_acos_ps(x);
	dr=_mm512_div_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),dx),_mm512_sqrt_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(x,x))));
}

void graph_op_traits<__m512>::arc_tangent_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_atan_ps(x);
	dr=_mm512_div_ps(dx,_mm512_add_ps(_mm512_mul_ps(x,x),_mm512_set1_ps(1.0f)));
}

void graph_op_traits<__m512>::hyperbolic_sine_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sinh_ps(x);
	dr=_mm512_mul_ps(_mm512_cosh_ps(x),dx);
}

void graph_op_traits<__m512>::hyperbolic_cosine_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_cosh_ps(x);
	dr=_mm512_mul_ps(_mm512_sinh_ps(x),dx);
}

void graph_op_traits<__m512>::hyperbolic_tangent_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_tanh_ps(x);
	dr=_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(r,r)),dx);
}

void graph_op_traits<__m512>::add_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_ps(x,y);
	dr=_mm512_add_ps(dx,dy);
}

void graph_op_traits<__m512>::add_px_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_ps(x,y);
	dr=dy;
}

void graph_op_traits<__m512>::add_py_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m512>::subtract_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(x,y);
	dr=_mm512_sub_ps(dx,dy);
}

void graph_op_traits<__m512>::subtract_px_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(x,y);
	dr=_mm512_sub_ps(_mm512_set1_ps(0.0),dy);
}

void graph_op_traits<__m512>::subtract_py_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m512>::multiply_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_ps(x,y);
	dr=_mm512_add_ps(_mm512_mul_ps(y,dx),_mm512_mul_ps(x,dy));
}

void graph_op_traits<__m512>::multiply_px_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_ps(x,y);
	dr=_mm512_mul_ps(x,dy);
}

void graph_op_traits<__m512>::multiply_py_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_ps(x,y);
	dr=_mm512_mul_ps(y,dx);
}

void graph_op_traits<__m512>::divide_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_ps(x,y);
	dr=_mm512_div_ps(_mm512_sub_ps(dx,_mm512_mul_ps(r,dy)),y);
}

void graph_op_traits<__m512>::divide_px_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_ps(x,y);
	dr=_mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),dy),y);
}

void graph_op_traits<__m512>::divide_py_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_ps(x,y);
	dr=_mm512_div_ps(dx,y);
}

void graph_op_traits<__m512>::maximum_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_ps(x,y);
	dr=_mm512_add_ps(_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dx),_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dy));
}

void graph_op_traits<__m512>::maximum_px_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_ps(x,y);
	dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dy);
}

void graph_op_traits<__m512>::maximum_py_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_ps(x,y);
	dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dx);
}

void graph_op_traits<__m512>::minimum_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_ps(x,y);
	dr=_mm512_add_ps(_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dx),_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dy));
}

void graph_op_traits<__m512>::minimum_px_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_ps(x,y);
	dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dy);
}

void graph_op_traits<__m512>::minimum_py_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_ps(x,y);
	dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dx);
}

void graph_op_traits<__m512>::power_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_ps(x,y);
	dr=_mm512_add_ps(_mm512_mul_ps(_mm512_mul_ps(_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f))),y),dx),_mm512_mul_ps(_mm512_mul_ps(_mm512_log_ps(x),r),dy));
}

void graph_op_traits<__m512>::power_px_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_ps(x,y);
	dr=_mm512_mul_ps(_mm512_mul_ps(_mm512_log_ps(x),r),dy);
}

void graph_op_traits<__m512>::power_py_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_ps(x,y);
	dr=_mm512_mul_ps(_mm512_mul_ps(_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f))),y),dx);
}

void graph_op_traits<__m512>::add_scalar_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_add_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m512>::subtract_scalar_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m512>::scalar_subtract_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_sub_ps(x,y);
	dr=_mm512_sub_ps(_mm512_set1_ps(0.0),dy);
}

void graph_op_traits<__m512>::multiply_scalar_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_mul_ps(x,y);
	dr=_mm512_mul_ps(y,dx);
}

void graph_op_traits<__m512>::divide_scalar_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_ps(x,y);
	dr=_mm512_div_ps(dx,y);
}

void graph_op_traits<__m512>::scalar_divide_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_div_ps(x,y);
	dr=_mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),dy),y);
}

void graph_op_traits<__m512>::maximum_scalar_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_max_ps(x,y);
	dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dx);
}

void graph_op_traits<__m512>::minimum_scalar_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_min_ps(x,y);
	dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dx);
}

void graph_op_traits<__m512>::power_scalar_forward(__m512& r, __m512& dr, const __m512& x, const __m512& dx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_ps(x,y);
	dr=_mm512_mul_ps(_mm512_mul_ps(_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f))),y),dx);
}

void graph_op_traits<__m512>::scalar_power_forward(__m512& r, __m512& dr, const __m512& x, const __m512& y, const __m512& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm512_pow_ps(x,y);
	dr=_mm512_mul_ps(_mm512_mul_ps(_mm512_log_ps(x),r),dy);
}

void graph_op_traits<__m512>::equal_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, wr);
}

void graph_op_traits<__m512>::squareroot_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(_mm512_mul_ps(wr,_mm512_set1_ps(0.5f)),r));
}

void graph_op_traits<__m512>::change_sign_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_sub_ps(wx, wr);
}

void graph_op_traits<__m512>::exponential_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,r));
}

void graph_op_traits<__m512>::logarithm_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,x));
}

void graph_op_traits<__m512>::logarithm2_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_mul_ps(x,_mm512_set1_ps(0.69314718055994529f))));
}

void graph_op_traits<__m512>::logarithm10_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_mul_ps(x,_mm512_set1_ps(2.3025850929940459f))));
}

void graph_op_traits<__m512>::complementary_errorfunc_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_sub_ps(wx, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_exp_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),x),x))),_mm512_set1_ps(1.1283791670955126f)));
}

void graph_op_traits<__m512>::sine_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,_mm512_cos_ps(x)));
}

void graph_op_traits<__m512>::cosine_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),wr),_mm512_sin_ps(x)));
}

void graph_op_traits<__m512>::tangent_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_mul_ps(_mm512_cos_ps(x),_mm512_cos_ps(x))));
}

void graph_op_traits<__m512>::arc_sine_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_sqrt_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(x,x)))));
}

void graph_op_traits<__m512>::arc_cosine_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),wr),_mm512_sqrt_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(x,x)))));
}

void graph_op_traits<__m512>::arc_tangent_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_add_ps(_mm512_mul_ps(x,x),_mm512_set1_ps(1.0f))));
}

void graph_op_traits<__m512>::hyperbolic_sine_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,_mm512_cosh_ps(x)));
}

void graph_op_traits<__m512>::hyperbolic_cosine_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,_mm512_sinh_ps(x)));
}

void graph_op_traits<__m512>::hyperbolic_tangent_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(r,r))));
}

void graph_op_traits<__m512>::add_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, wr);
	wy=_mm512_add_ps(wy, wr);
}

void graph_op_traits<__m512>::add_px_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_ps(wy, wr);
}

void graph_op_traits<__m512>::add_py_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, wr);
}

void graph_op_traits<__m512>::subtract_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, wr);
	wy=_mm512_sub_ps(wy, wr);
}

void graph_op_traits<__m512>::subtract_px_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_sub_ps(wy, wr);
}

void graph_op_traits<__m512>::subtract_py_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, wr);
}

void graph_op_traits<__m512>::multiply_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(y,wr));
	wy=_mm512_add_ps(wy, _mm512_mul_ps(x,wr));
}

void graph_op_traits<__m512>::multiply_px_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_ps(wy, _mm512_mul_ps(x,wr));
}

void graph_op_traits<__m512>::multiply_py_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(y,wr));
}

void graph_op_traits<__m512>::divide_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,y));
	wy=_mm512_add_ps(wy, _mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m512>::divide_px_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_ps(wy, _mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m512>::divide_py_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,y));
}

void graph_op_traits<__m512>::maximum_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
	wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
}

void graph_op_traits<__m512>::maximum_px_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
}

void graph_op_traits<__m512>::maximum_py_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
}

void graph_op_traits<__m512>::minimum_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
	wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
}

void graph_op_traits<__m512>::minimum_px_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
}

void graph_op_traits<__m512>::minimum_py_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
}

void graph_op_traits<__m512>::power_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f)))),y));
	wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_log_ps(x)),r));
}

void graph_op_traits<__m512>::power_px_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_log_ps(x)),r));
}

void graph_op_traits<__m512>::power_py_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f)))),y));
}

void graph_op_traits<__m512>::add_scalar_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, wr);
}

void graph_op_traits<__m512>::subtract_scalar_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, wr);
}

void graph_op_traits<__m512>::scalar_subtract_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_sub_ps(wy, wr);
}

void graph_op_traits<__m512>::multiply_scalar_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(y,wr));
}

void graph_op_traits<__m512>::divide_scalar_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_div_ps(wr,y));
}

void graph_op_traits<__m512>::scalar_divide_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_ps(wy, _mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m512>::maximum_scalar_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
}

void graph_op_traits<__m512>::minimum_scalar_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
}

void graph_op_traits<__m512>::power_scalar_backward(const __m512& r, const __m512& wr, const __m512& x, __m512& wx, const __m512& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_mul_ps(_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f))),y),wr));
}

void graph_op_traits<__m512>::scalar_power_backward(const __m512& r, const __m512& wr, const __m512& x, const __m512& y, __m512& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_mul_ps(_mm512_log_ps(x),r),wr));
}

void graph_op_traits<__m256>::equal_scalar(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m256>::equal(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m256>::squareroot(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sqrt_ps(x);
}

void graph_op_traits<__m256>::change_sign(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(_mm256_set1_ps(0.0),x);
}

void graph_op_traits<__m256>::ceiling(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_ceil_ps(x);
}

void graph_op_traits<__m256>::flooring(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_floor_ps(x);
}

void graph_op_traits<__m256>::heaviside_step(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_hss_ps(x);
}

void graph_op_traits<__m256>::exponential(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_exp_ps(x);
}

void graph_op_traits<__m256>::logarithm(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log_ps(x);
}

void graph_op_traits<__m256>::logarithm2(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log2_ps(x);
}

void graph_op_traits<__m256>::logarithm10(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log10_ps(x);
}

void graph_op_traits<__m256>::complementary_errorfunc(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_erfc_ps(x);
}

void graph_op_traits<__m256>::sine(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sin_ps(x);
}

void graph_op_traits<__m256>::cosine(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_cos_ps(x);
}

void graph_op_traits<__m256>::tangent(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_tan_ps(x);
}

void graph_op_traits<__m256>::arc_sine(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_asin_ps(x);
}

void graph_op_traits<__m256>::arc_cosine(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_acos_ps(x);
}

void graph_op_traits<__m256>::arc_tangent(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_atan_ps(x);
}

void graph_op_traits<__m256>::hyperbolic_sine(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sinh_ps(x);
}

void graph_op_traits<__m256>::hyperbolic_cosine(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_cosh_ps(x);
}

void graph_op_traits<__m256>::hyperbolic_tangent(__m256& r, const __m256& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_tanh_ps(x);
}

void graph_op_traits<__m256>::add(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_ps(x,y);
}

void graph_op_traits<__m256>::subtract(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(x,y);
}

void graph_op_traits<__m256>::multiply(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_ps(x,y);
}

void graph_op_traits<__m256>::divide(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_ps(x,y);
}

void graph_op_traits<__m256>::maximum(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_ps(x,y);
}

void graph_op_traits<__m256>::minimum(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_ps(x,y);
}

void graph_op_traits<__m256>::power(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_ps(x,y);
}

void graph_op_traits<__m256>::add_scalar(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_ps(x,y);
}

void graph_op_traits<__m256>::subtract_scalar(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(x,y);
}

void graph_op_traits<__m256>::scalar_subtract(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(x,y);
}

void graph_op_traits<__m256>::multiply_scalar(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_ps(x,y);
}

void graph_op_traits<__m256>::divide_scalar(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_ps(x,y);
}

void graph_op_traits<__m256>::scalar_divide(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_ps(x,y);
}

void graph_op_traits<__m256>::maximum_scalar(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_ps(x,y);
}

void graph_op_traits<__m256>::minimum_scalar(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_ps(x,y);
}

void graph_op_traits<__m256>::power_scalar(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_ps(x,y);
}

void graph_op_traits<__m256>::scalar_power(__m256& r, const __m256& x, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_ps(x,y);
}

void graph_op_traits<__m256>::equal_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=x;
	dr=dx;
}

void graph_op_traits<__m256>::squareroot_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sqrt_ps(x);
	dr=_mm256_div_ps(_mm256_mul_ps(dx,_mm256_set1_ps(0.5f)),r);
}

void graph_op_traits<__m256>::change_sign_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(_mm256_set1_ps(0.0),x);
	dr=_mm256_sub_ps(_mm256_set1_ps(0.0),dx);
}

void graph_op_traits<__m256>::ceiling_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_ceil_ps(x);
	dr=_mm256_set1_ps(0.0);
}

void graph_op_traits<__m256>::flooring_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_floor_ps(x);
	dr=_mm256_set1_ps(0.0);
}

void graph_op_traits<__m256>::heaviside_step_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_hss_ps(x);
	dr=_mm256_set1_ps(0.0);
}

void graph_op_traits<__m256>::exponential_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_exp_ps(x);
	dr=_mm256_mul_ps(r,dx);
}

void graph_op_traits<__m256>::logarithm_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log_ps(x);
	dr=_mm256_div_ps(dx,x);
}

void graph_op_traits<__m256>::logarithm2_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log2_ps(x);
	dr=_mm256_div_ps(dx,_mm256_mul_ps(x,_mm256_set1_ps(0.69314718055994529f)));
}

void graph_op_traits<__m256>::logarithm10_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_log10_ps(x);
	dr=_mm256_div_ps(dx,_mm256_mul_ps(x,_mm256_set1_ps(2.3025850929940459f)));
}

void graph_op_traits<__m256>::complementary_errorfunc_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_erfc_ps(x);
	dr=_mm256_sub_ps(_mm256_set1_ps(0.0),_mm256_mul_ps(_mm256_mul_ps(_mm256_exp_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),x),x)),_mm256_set1_ps(1.1283791670955126f)),dx));
}

void graph_op_traits<__m256>::sine_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sin_ps(x);
	dr=_mm256_mul_ps(_mm256_cos_ps(x),dx);
}

void graph_op_traits<__m256>::cosine_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_cos_ps(x);
	dr=_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),_mm256_sin_ps(x)),dx);
}

void graph_op_traits<__m256>::tangent_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_tan_ps(x);
	dr=_mm256_div_ps(dx,_mm256_mul_ps(_mm256_cos_ps(x),_mm256_cos_ps(x)));
}

void graph_op_traits<__m256>::arc_sine_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_asin_ps(x);
	dr=_mm256_div_ps(dx,_mm256_sqrt_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(x,x))));
}

void graph_op_traits<__m256>::arc_cosine_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_acos_ps(x);
	dr=_mm256_div_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),dx),_mm256_sqrt_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(x,x))));
}

void graph_op_traits<__m256>::arc_tangent_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_atan_ps(x);
	dr=_mm256_div_ps(dx,_mm256_add_ps(_mm256_mul_ps(x,x),_mm256_set1_ps(1.0f)));
}

void graph_op_traits<__m256>::hyperbolic_sine_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sinh_ps(x);
	dr=_mm256_mul_ps(_mm256_cosh_ps(x),dx);
}

void graph_op_traits<__m256>::hyperbolic_cosine_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_cosh_ps(x);
	dr=_mm256_mul_ps(_mm256_sinh_ps(x),dx);
}

void graph_op_traits<__m256>::hyperbolic_tangent_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_tanh_ps(x);
	dr=_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(r,r)),dx);
}

void graph_op_traits<__m256>::add_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_ps(x,y);
	dr=_mm256_add_ps(dx,dy);
}

void graph_op_traits<__m256>::add_px_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_ps(x,y);
	dr=dy;
}

void graph_op_traits<__m256>::add_py_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m256>::subtract_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(x,y);
	dr=_mm256_sub_ps(dx,dy);
}

void graph_op_traits<__m256>::subtract_px_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(x,y);
	dr=_mm256_sub_ps(_mm256_set1_ps(0.0),dy);
}

void graph_op_traits<__m256>::subtract_py_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m256>::multiply_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_ps(x,y);
	dr=_mm256_add_ps(_mm256_mul_ps(y,dx),_mm256_mul_ps(x,dy));
}

void graph_op_traits<__m256>::multiply_px_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_ps(x,y);
	dr=_mm256_mul_ps(x,dy);
}

void graph_op_traits<__m256>::multiply_py_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_ps(x,y);
	dr=_mm256_mul_ps(y,dx);
}

void graph_op_traits<__m256>::divide_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_ps(x,y);
	dr=_mm256_div_ps(_mm256_sub_ps(dx,_mm256_mul_ps(r,dy)),y);
}

void graph_op_traits<__m256>::divide_px_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_ps(x,y);
	dr=_mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),dy),y);
}

void graph_op_traits<__m256>::divide_py_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_ps(x,y);
	dr=_mm256_div_ps(dx,y);
}

void graph_op_traits<__m256>::maximum_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_ps(x,y);
	dr=_mm256_add_ps(_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dx),_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dy));
}

void graph_op_traits<__m256>::maximum_px_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_ps(x,y);
	dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dy);
}

void graph_op_traits<__m256>::maximum_py_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_ps(x,y);
	dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dx);
}

void graph_op_traits<__m256>::minimum_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_ps(x,y);
	dr=_mm256_add_ps(_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dx),_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dy));
}

void graph_op_traits<__m256>::minimum_px_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_ps(x,y);
	dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dy);
}

void graph_op_traits<__m256>::minimum_py_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_ps(x,y);
	dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dx);
}

void graph_op_traits<__m256>::power_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_ps(x,y);
	dr=_mm256_add_ps(_mm256_mul_ps(_mm256_mul_ps(_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f))),y),dx),_mm256_mul_ps(_mm256_mul_ps(_mm256_log_ps(x),r),dy));
}

void graph_op_traits<__m256>::power_px_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_ps(x,y);
	dr=_mm256_mul_ps(_mm256_mul_ps(_mm256_log_ps(x),r),dy);
}

void graph_op_traits<__m256>::power_py_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_ps(x,y);
	dr=_mm256_mul_ps(_mm256_mul_ps(_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f))),y),dx);
}

void graph_op_traits<__m256>::add_scalar_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_add_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m256>::subtract_scalar_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m256>::scalar_subtract_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_sub_ps(x,y);
	dr=_mm256_sub_ps(_mm256_set1_ps(0.0),dy);
}

void graph_op_traits<__m256>::multiply_scalar_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_mul_ps(x,y);
	dr=_mm256_mul_ps(y,dx);
}

void graph_op_traits<__m256>::divide_scalar_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_ps(x,y);
	dr=_mm256_div_ps(dx,y);
}

void graph_op_traits<__m256>::scalar_divide_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_div_ps(x,y);
	dr=_mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),dy),y);
}

void graph_op_traits<__m256>::maximum_scalar_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_max_ps(x,y);
	dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dx);
}

void graph_op_traits<__m256>::minimum_scalar_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_min_ps(x,y);
	dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dx);
}

void graph_op_traits<__m256>::power_scalar_forward(__m256& r, __m256& dr, const __m256& x, const __m256& dx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_ps(x,y);
	dr=_mm256_mul_ps(_mm256_mul_ps(_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f))),y),dx);
}

void graph_op_traits<__m256>::scalar_power_forward(__m256& r, __m256& dr, const __m256& x, const __m256& y, const __m256& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm256_pow_ps(x,y);
	dr=_mm256_mul_ps(_mm256_mul_ps(_mm256_log_ps(x),r),dy);
}

void graph_op_traits<__m256>::equal_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, wr);
}

void graph_op_traits<__m256>::squareroot_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(_mm256_mul_ps(wr,_mm256_set1_ps(0.5f)),r));
}

void graph_op_traits<__m256>::change_sign_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_sub_ps(wx, wr);
}

void graph_op_traits<__m256>::exponential_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,r));
}

void graph_op_traits<__m256>::logarithm_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,x));
}

void graph_op_traits<__m256>::logarithm2_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_mul_ps(x,_mm256_set1_ps(0.69314718055994529f))));
}

void graph_op_traits<__m256>::logarithm10_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_mul_ps(x,_mm256_set1_ps(2.3025850929940459f))));
}

void graph_op_traits<__m256>::complementary_errorfunc_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_sub_ps(wx, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_exp_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),x),x))),_mm256_set1_ps(1.1283791670955126f)));
}

void graph_op_traits<__m256>::sine_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,_mm256_cos_ps(x)));
}

void graph_op_traits<__m256>::cosine_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),wr),_mm256_sin_ps(x)));
}

void graph_op_traits<__m256>::tangent_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_mul_ps(_mm256_cos_ps(x),_mm256_cos_ps(x))));
}

void graph_op_traits<__m256>::arc_sine_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_sqrt_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(x,x)))));
}

void graph_op_traits<__m256>::arc_cosine_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),wr),_mm256_sqrt_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(x,x)))));
}

void graph_op_traits<__m256>::arc_tangent_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_add_ps(_mm256_mul_ps(x,x),_mm256_set1_ps(1.0f))));
}

void graph_op_traits<__m256>::hyperbolic_sine_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,_mm256_cosh_ps(x)));
}

void graph_op_traits<__m256>::hyperbolic_cosine_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,_mm256_sinh_ps(x)));
}

void graph_op_traits<__m256>::hyperbolic_tangent_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(r,r))));
}

void graph_op_traits<__m256>::add_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, wr);
	wy=_mm256_add_ps(wy, wr);
}

void graph_op_traits<__m256>::add_px_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_ps(wy, wr);
}

void graph_op_traits<__m256>::add_py_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, wr);
}

void graph_op_traits<__m256>::subtract_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, wr);
	wy=_mm256_sub_ps(wy, wr);
}

void graph_op_traits<__m256>::subtract_px_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_sub_ps(wy, wr);
}

void graph_op_traits<__m256>::subtract_py_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, wr);
}

void graph_op_traits<__m256>::multiply_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(y,wr));
	wy=_mm256_add_ps(wy, _mm256_mul_ps(x,wr));
}

void graph_op_traits<__m256>::multiply_px_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_ps(wy, _mm256_mul_ps(x,wr));
}

void graph_op_traits<__m256>::multiply_py_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(y,wr));
}

void graph_op_traits<__m256>::divide_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,y));
	wy=_mm256_add_ps(wy, _mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m256>::divide_px_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_ps(wy, _mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m256>::divide_py_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,y));
}

void graph_op_traits<__m256>::maximum_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
	wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
}

void graph_op_traits<__m256>::maximum_px_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
}

void graph_op_traits<__m256>::maximum_py_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
}

void graph_op_traits<__m256>::minimum_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
	wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
}

void graph_op_traits<__m256>::minimum_px_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
}

void graph_op_traits<__m256>::minimum_py_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
}

void graph_op_traits<__m256>::power_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f)))),y));
	wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_log_ps(x)),r));
}

void graph_op_traits<__m256>::power_px_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_log_ps(x)),r));
}

void graph_op_traits<__m256>::power_py_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f)))),y));
}

void graph_op_traits<__m256>::add_scalar_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, wr);
}

void graph_op_traits<__m256>::subtract_scalar_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, wr);
}

void graph_op_traits<__m256>::scalar_subtract_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_sub_ps(wy, wr);
}

void graph_op_traits<__m256>::multiply_scalar_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(y,wr));
}

void graph_op_traits<__m256>::divide_scalar_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_div_ps(wr,y));
}

void graph_op_traits<__m256>::scalar_divide_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_ps(wy, _mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m256>::maximum_scalar_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
}

void graph_op_traits<__m256>::minimum_scalar_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
}

void graph_op_traits<__m256>::power_scalar_backward(const __m256& r, const __m256& wr, const __m256& x, __m256& wx, const __m256& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_mul_ps(_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f))),y),wr));
}

void graph_op_traits<__m256>::scalar_power_backward(const __m256& r, const __m256& wr, const __m256& x, const __m256& y, __m256& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_mul_ps(_mm256_log_ps(x),r),wr));
}

void graph_op_traits<__m128>::equal_scalar(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m128>::equal(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=x;
}

void graph_op_traits<__m128>::squareroot(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sqrt_ps(x);
}

void graph_op_traits<__m128>::change_sign(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(_mm_set1_ps(0.0),x);
}

void graph_op_traits<__m128>::ceiling(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_ceil_ps(x);
}

void graph_op_traits<__m128>::flooring(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_floor_ps(x);
}

void graph_op_traits<__m128>::heaviside_step(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_hss_ps(x);
}

void graph_op_traits<__m128>::exponential(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_exp_ps(x);
}

void graph_op_traits<__m128>::logarithm(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log_ps(x);
}

void graph_op_traits<__m128>::logarithm2(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log2_ps(x);
}

void graph_op_traits<__m128>::logarithm10(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log10_ps(x);
}

void graph_op_traits<__m128>::complementary_errorfunc(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_erfc_ps(x);
}

void graph_op_traits<__m128>::sine(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sin_ps(x);
}

void graph_op_traits<__m128>::cosine(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_cos_ps(x);
}

void graph_op_traits<__m128>::tangent(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_tan_ps(x);
}

void graph_op_traits<__m128>::arc_sine(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_asin_ps(x);
}

void graph_op_traits<__m128>::arc_cosine(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_acos_ps(x);
}

void graph_op_traits<__m128>::arc_tangent(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_atan_ps(x);
}

void graph_op_traits<__m128>::hyperbolic_sine(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sinh_ps(x);
}

void graph_op_traits<__m128>::hyperbolic_cosine(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_cosh_ps(x);
}

void graph_op_traits<__m128>::hyperbolic_tangent(__m128& r, const __m128& x, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_tanh_ps(x);
}

void graph_op_traits<__m128>::add(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_ps(x,y);
}

void graph_op_traits<__m128>::subtract(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(x,y);
}

void graph_op_traits<__m128>::multiply(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_ps(x,y);
}

void graph_op_traits<__m128>::divide(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_ps(x,y);
}

void graph_op_traits<__m128>::maximum(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_ps(x,y);
}

void graph_op_traits<__m128>::minimum(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_ps(x,y);
}

void graph_op_traits<__m128>::power(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_ps(x,y);
}

void graph_op_traits<__m128>::add_scalar(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_ps(x,y);
}

void graph_op_traits<__m128>::subtract_scalar(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(x,y);
}

void graph_op_traits<__m128>::scalar_subtract(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(x,y);
}

void graph_op_traits<__m128>::multiply_scalar(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_ps(x,y);
}

void graph_op_traits<__m128>::divide_scalar(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_ps(x,y);
}

void graph_op_traits<__m128>::scalar_divide(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_ps(x,y);
}

void graph_op_traits<__m128>::maximum_scalar(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_ps(x,y);
}

void graph_op_traits<__m128>::minimum_scalar(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_ps(x,y);
}

void graph_op_traits<__m128>::power_scalar(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_ps(x,y);
}

void graph_op_traits<__m128>::scalar_power(__m128& r, const __m128& x, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_ps(x,y);
}

void graph_op_traits<__m128>::equal_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=x;
	dr=dx;
}

void graph_op_traits<__m128>::squareroot_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sqrt_ps(x);
	dr=_mm_div_ps(_mm_mul_ps(dx,_mm_set1_ps(0.5f)),r);
}

void graph_op_traits<__m128>::change_sign_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(_mm_set1_ps(0.0),x);
	dr=_mm_sub_ps(_mm_set1_ps(0.0),dx);
}

void graph_op_traits<__m128>::ceiling_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_ceil_ps(x);
	dr=_mm_set1_ps(0.0);
}

void graph_op_traits<__m128>::flooring_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_floor_ps(x);
	dr=_mm_set1_ps(0.0);
}

void graph_op_traits<__m128>::heaviside_step_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_hss_ps(x);
	dr=_mm_set1_ps(0.0);
}

void graph_op_traits<__m128>::exponential_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_exp_ps(x);
	dr=_mm_mul_ps(r,dx);
}

void graph_op_traits<__m128>::logarithm_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log_ps(x);
	dr=_mm_div_ps(dx,x);
}

void graph_op_traits<__m128>::logarithm2_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log2_ps(x);
	dr=_mm_div_ps(dx,_mm_mul_ps(x,_mm_set1_ps(0.69314718055994529f)));
}

void graph_op_traits<__m128>::logarithm10_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_log10_ps(x);
	dr=_mm_div_ps(dx,_mm_mul_ps(x,_mm_set1_ps(2.3025850929940459f)));
}

void graph_op_traits<__m128>::complementary_errorfunc_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_erfc_ps(x);
	dr=_mm_sub_ps(_mm_set1_ps(0.0),_mm_mul_ps(_mm_mul_ps(_mm_exp_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),x),x)),_mm_set1_ps(1.1283791670955126f)),dx));
}

void graph_op_traits<__m128>::sine_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sin_ps(x);
	dr=_mm_mul_ps(_mm_cos_ps(x),dx);
}

void graph_op_traits<__m128>::cosine_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_cos_ps(x);
	dr=_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),_mm_sin_ps(x)),dx);
}

void graph_op_traits<__m128>::tangent_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_tan_ps(x);
	dr=_mm_div_ps(dx,_mm_mul_ps(_mm_cos_ps(x),_mm_cos_ps(x)));
}

void graph_op_traits<__m128>::arc_sine_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_asin_ps(x);
	dr=_mm_div_ps(dx,_mm_sqrt_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(x,x))));
}

void graph_op_traits<__m128>::arc_cosine_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_acos_ps(x);
	dr=_mm_div_ps(_mm_sub_ps(_mm_set1_ps(0.0),dx),_mm_sqrt_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(x,x))));
}

void graph_op_traits<__m128>::arc_tangent_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_atan_ps(x);
	dr=_mm_div_ps(dx,_mm_add_ps(_mm_mul_ps(x,x),_mm_set1_ps(1.0f)));
}

void graph_op_traits<__m128>::hyperbolic_sine_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sinh_ps(x);
	dr=_mm_mul_ps(_mm_cosh_ps(x),dx);
}

void graph_op_traits<__m128>::hyperbolic_cosine_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_cosh_ps(x);
	dr=_mm_mul_ps(_mm_sinh_ps(x),dx);
}

void graph_op_traits<__m128>::hyperbolic_tangent_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_tanh_ps(x);
	dr=_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(r,r)),dx);
}

void graph_op_traits<__m128>::add_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_ps(x,y);
	dr=_mm_add_ps(dx,dy);
}

void graph_op_traits<__m128>::add_px_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_ps(x,y);
	dr=dy;
}

void graph_op_traits<__m128>::add_py_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m128>::subtract_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(x,y);
	dr=_mm_sub_ps(dx,dy);
}

void graph_op_traits<__m128>::subtract_px_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(x,y);
	dr=_mm_sub_ps(_mm_set1_ps(0.0),dy);
}

void graph_op_traits<__m128>::subtract_py_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m128>::multiply_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_ps(x,y);
	dr=_mm_add_ps(_mm_mul_ps(y,dx),_mm_mul_ps(x,dy));
}

void graph_op_traits<__m128>::multiply_px_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_ps(x,y);
	dr=_mm_mul_ps(x,dy);
}

void graph_op_traits<__m128>::multiply_py_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_ps(x,y);
	dr=_mm_mul_ps(y,dx);
}

void graph_op_traits<__m128>::divide_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_ps(x,y);
	dr=_mm_div_ps(_mm_sub_ps(dx,_mm_mul_ps(r,dy)),y);
}

void graph_op_traits<__m128>::divide_px_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_ps(x,y);
	dr=_mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),dy),y);
}

void graph_op_traits<__m128>::divide_py_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_ps(x,y);
	dr=_mm_div_ps(dx,y);
}

void graph_op_traits<__m128>::maximum_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_ps(x,y);
	dr=_mm_add_ps(_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dx),_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dy));
}

void graph_op_traits<__m128>::maximum_px_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_ps(x,y);
	dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dy);
}

void graph_op_traits<__m128>::maximum_py_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_ps(x,y);
	dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dx);
}

void graph_op_traits<__m128>::minimum_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_ps(x,y);
	dr=_mm_add_ps(_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dx),_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dy));
}

void graph_op_traits<__m128>::minimum_px_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_ps(x,y);
	dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dy);
}

void graph_op_traits<__m128>::minimum_py_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_ps(x,y);
	dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dx);
}

void graph_op_traits<__m128>::power_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_ps(x,y);
	dr=_mm_add_ps(_mm_mul_ps(_mm_mul_ps(_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f))),y),dx),_mm_mul_ps(_mm_mul_ps(_mm_log_ps(x),r),dy));
}

void graph_op_traits<__m128>::power_px_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_ps(x,y);
	dr=_mm_mul_ps(_mm_mul_ps(_mm_log_ps(x),r),dy);
}

void graph_op_traits<__m128>::power_py_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_ps(x,y);
	dr=_mm_mul_ps(_mm_mul_ps(_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f))),y),dx);
}

void graph_op_traits<__m128>::add_scalar_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_add_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m128>::subtract_scalar_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(x,y);
	dr=dx;
}

void graph_op_traits<__m128>::scalar_subtract_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_sub_ps(x,y);
	dr=_mm_sub_ps(_mm_set1_ps(0.0),dy);
}

void graph_op_traits<__m128>::multiply_scalar_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_mul_ps(x,y);
	dr=_mm_mul_ps(y,dx);
}

void graph_op_traits<__m128>::divide_scalar_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_ps(x,y);
	dr=_mm_div_ps(dx,y);
}

void graph_op_traits<__m128>::scalar_divide_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_div_ps(x,y);
	dr=_mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),dy),y);
}

void graph_op_traits<__m128>::maximum_scalar_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_max_ps(x,y);
	dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dx);
}

void graph_op_traits<__m128>::minimum_scalar_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_min_ps(x,y);
	dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dx);
}

void graph_op_traits<__m128>::power_scalar_forward(__m128& r, __m128& dr, const __m128& x, const __m128& dx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_ps(x,y);
	dr=_mm_mul_ps(_mm_mul_ps(_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f))),y),dx);
}

void graph_op_traits<__m128>::scalar_power_forward(__m128& r, __m128& dr, const __m128& x, const __m128& y, const __m128& dy, const uint64_t& offset, const uint64_t& n)
{
	r=_mm_pow_ps(x,y);
	dr=_mm_mul_ps(_mm_mul_ps(_mm_log_ps(x),r),dy);
}

void graph_op_traits<__m128>::equal_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, wr);
}

void graph_op_traits<__m128>::squareroot_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(_mm_mul_ps(wr,_mm_set1_ps(0.5f)),r));
}

void graph_op_traits<__m128>::change_sign_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_sub_ps(wx, wr);
}

void graph_op_traits<__m128>::exponential_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(wr,r));
}

void graph_op_traits<__m128>::logarithm_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,x));
}

void graph_op_traits<__m128>::logarithm2_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_mul_ps(x,_mm_set1_ps(0.69314718055994529f))));
}

void graph_op_traits<__m128>::logarithm10_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_mul_ps(x,_mm_set1_ps(2.3025850929940459f))));
}

void graph_op_traits<__m128>::complementary_errorfunc_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_sub_ps(wx, _mm_mul_ps(_mm_mul_ps(wr,_mm_exp_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),x),x))),_mm_set1_ps(1.1283791670955126f)));
}

void graph_op_traits<__m128>::sine_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(wr,_mm_cos_ps(x)));
}

void graph_op_traits<__m128>::cosine_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),wr),_mm_sin_ps(x)));
}

void graph_op_traits<__m128>::tangent_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_mul_ps(_mm_cos_ps(x),_mm_cos_ps(x))));
}

void graph_op_traits<__m128>::arc_sine_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_sqrt_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(x,x)))));
}

void graph_op_traits<__m128>::arc_cosine_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(_mm_sub_ps(_mm_set1_ps(0.0),wr),_mm_sqrt_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(x,x)))));
}

void graph_op_traits<__m128>::arc_tangent_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_add_ps(_mm_mul_ps(x,x),_mm_set1_ps(1.0f))));
}

void graph_op_traits<__m128>::hyperbolic_sine_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(wr,_mm_cosh_ps(x)));
}

void graph_op_traits<__m128>::hyperbolic_cosine_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(wr,_mm_sinh_ps(x)));
}

void graph_op_traits<__m128>::hyperbolic_tangent_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(wr,_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(r,r))));
}

void graph_op_traits<__m128>::add_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, wr);
	wy=_mm_add_ps(wy, wr);
}

void graph_op_traits<__m128>::add_px_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_ps(wy, wr);
}

void graph_op_traits<__m128>::add_py_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, wr);
}

void graph_op_traits<__m128>::subtract_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, wr);
	wy=_mm_sub_ps(wy, wr);
}

void graph_op_traits<__m128>::subtract_px_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_sub_ps(wy, wr);
}

void graph_op_traits<__m128>::subtract_py_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, wr);
}

void graph_op_traits<__m128>::multiply_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(y,wr));
	wy=_mm_add_ps(wy, _mm_mul_ps(x,wr));
}

void graph_op_traits<__m128>::multiply_px_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_ps(wy, _mm_mul_ps(x,wr));
}

void graph_op_traits<__m128>::multiply_py_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(y,wr));
}

void graph_op_traits<__m128>::divide_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,y));
	wy=_mm_add_ps(wy, _mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m128>::divide_px_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_ps(wy, _mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m128>::divide_py_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,y));
}

void graph_op_traits<__m128>::maximum_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
	wy=_mm_add_ps(wy, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
}

void graph_op_traits<__m128>::maximum_px_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_ps(wy, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
}

void graph_op_traits<__m128>::maximum_py_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
}

void graph_op_traits<__m128>::minimum_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
	wy=_mm_add_ps(wy, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
}

void graph_op_traits<__m128>::minimum_px_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_ps(wy, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
}

void graph_op_traits<__m128>::minimum_py_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
}

void graph_op_traits<__m128>::power_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_mul_ps(wr,_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f)))),y));
	wy=_mm_add_ps(wy, _mm_mul_ps(_mm_mul_ps(wr,_mm_log_ps(x)),r));
}

void graph_op_traits<__m128>::power_px_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_ps(wy, _mm_mul_ps(_mm_mul_ps(wr,_mm_log_ps(x)),r));
}

void graph_op_traits<__m128>::power_py_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_mul_ps(wr,_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f)))),y));
}

void graph_op_traits<__m128>::add_scalar_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, wr);
}

void graph_op_traits<__m128>::subtract_scalar_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, wr);
}

void graph_op_traits<__m128>::scalar_subtract_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_sub_ps(wy, wr);
}

void graph_op_traits<__m128>::multiply_scalar_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(y,wr));
}

void graph_op_traits<__m128>::divide_scalar_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_div_ps(wr,y));
}

void graph_op_traits<__m128>::scalar_divide_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_ps(wy, _mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),wr),y));
}

void graph_op_traits<__m128>::maximum_scalar_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
}

void graph_op_traits<__m128>::minimum_scalar_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
}

void graph_op_traits<__m128>::power_scalar_backward(const __m128& r, const __m128& wr, const __m128& x, __m128& wx, const __m128& y, const uint64_t& offset, const uint64_t& n)
{
	wx=_mm_add_ps(wx, _mm_mul_ps(_mm_mul_ps(_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f))),y),wr));
}

void graph_op_traits<__m128>::scalar_power_backward(const __m128& r, const __m128& wr, const __m128& x, const __m128& y, __m128& wy, const uint64_t& offset, const uint64_t& n)
{
	wy=_mm_add_ps(wy, _mm_mul_ps(_mm_mul_ps(_mm_log_ps(x),r),wr));
}

void graph_op_traits<__m512d*>::equal_scalar(double* _r, const double& _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::equal_scalar(double* _r, const double& _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	double *m_r = _r + offset;
	__m512d r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=x;
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::equal(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::equal(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=x;
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::squareroot(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::squareroot(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_sqrt_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::change_sign(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::change_sign(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_sub_pd(_mm512_set1_pd(0.0),x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::ceiling(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::ceiling(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_ceil_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::flooring(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::flooring(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_floor_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::heaviside_step(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::heaviside_step(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_hss_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::exponential(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::exponential(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_exp_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_log_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm2(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm2(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_log2_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm10(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm10(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_log10_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::complementary_errorfunc(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::complementary_errorfunc(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_erfc_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_sin_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_cos_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_tan_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_asin_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_acos_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_atan_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_sinh_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_cosh_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_tanh_pd(x);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512d*>::add(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		r=_mm512_add_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		r=_mm512_sub_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		r=_mm512_mul_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		r=_mm512_div_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		r=_mm512_max_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		r=_mm512_min_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		r=_mm512_pow_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_add_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_sub_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_subtract(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_subtract(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		r=_mm512_sub_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_mul_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_div_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_divide(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_divide(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		r=_mm512_div_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_max_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_min_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m512d x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_pow_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_power(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_power(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m512d y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		r=_mm512_pow_pd(x,y);
		_mm512_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m256d*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::equal_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::equal_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=x;
		dr=dx;
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::squareroot_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::squareroot_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_sqrt_pd(x);
		dr=_mm512_div_pd(_mm512_mul_pd(dx,_mm512_set1_pd(0.5)),r);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::change_sign_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::change_sign_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_sub_pd(_mm512_set1_pd(0.0),x);
		dr=_mm512_sub_pd(_mm512_set1_pd(0.0),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::ceiling_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::ceiling_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_ceil_pd(x);
		dr=_mm512_set1_pd(0.0);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::flooring_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::flooring_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_floor_pd(x);
		dr=_mm512_set1_pd(0.0);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::heaviside_step_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::heaviside_step_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_hss_pd(x);
		dr=_mm512_set1_pd(0.0);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::exponential_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::exponential_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_exp_pd(x);
		dr=_mm512_mul_pd(r,dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_log_pd(x);
		dr=_mm512_div_pd(dx,x);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm2_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm2_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_log2_pd(x);
		dr=_mm512_div_pd(dx,_mm512_mul_pd(x,_mm512_set1_pd(0.69314718055994529)));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm10_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm10_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_log10_pd(x);
		dr=_mm512_div_pd(dx,_mm512_mul_pd(x,_mm512_set1_pd(2.3025850929940459)));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::complementary_errorfunc_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::complementary_errorfunc_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_erfc_pd(x);
		dr=_mm512_sub_pd(_mm512_set1_pd(0.0),_mm512_mul_pd(_mm512_mul_pd(_mm512_exp_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),x),x)),_mm512_set1_pd(1.1283791670955126)),dx));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_sin_pd(x);
		dr=_mm512_mul_pd(_mm512_cos_pd(x),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_cos_pd(x);
		dr=_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),_mm512_sin_pd(x)),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_tan_pd(x);
		dr=_mm512_div_pd(dx,_mm512_mul_pd(_mm512_cos_pd(x),_mm512_cos_pd(x)));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_asin_pd(x);
		dr=_mm512_div_pd(dx,_mm512_sqrt_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(x,x))));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_acos_pd(x);
		dr=_mm512_div_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),dx),_mm512_sqrt_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(x,x))));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_atan_pd(x);
		dr=_mm512_div_pd(dx,_mm512_add_pd(_mm512_mul_pd(x,x),_mm512_set1_pd(1.0)));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_sinh_pd(x);
		dr=_mm512_mul_pd(_mm512_cosh_pd(x),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_cosh_pd(x);
		dr=_mm512_mul_pd(_mm512_sinh_pd(x),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_tanh_pd(x);
		dr=_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(r,r)),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512d*>::add_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::add_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_add_pd(x,y);
		dr=_mm512_add_pd(dx,dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::add_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::add_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_add_pd(x,y);
		dr=dy;
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::add_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_add_pd(x,y);
		dr=dx;
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_sub_pd(x,y);
		dr=_mm512_sub_pd(dx,dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_sub_pd(x,y);
		dr=_mm512_sub_pd(_mm512_set1_pd(0.0),dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_sub_pd(x,y);
		dr=dx;
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_mul_pd(x,y);
		dr=_mm512_add_pd(_mm512_mul_pd(y,dx),_mm512_mul_pd(x,dy));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_mul_pd(x,y);
		dr=_mm512_mul_pd(x,dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_mul_pd(x,y);
		dr=_mm512_mul_pd(y,dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_div_pd(x,y);
		dr=_mm512_div_pd(_mm512_sub_pd(dx,_mm512_mul_pd(r,dy)),y);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_div_pd(x,y);
		dr=_mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),dy),y);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_div_pd(x,y);
		dr=_mm512_div_pd(dx,y);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_max_pd(x,y);
		dr=_mm512_add_pd(_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dx),_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dy));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_max_pd(x,y);
		dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_max_pd(x,y);
		dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_min_pd(x,y);
		dr=_mm512_add_pd(_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dx),_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dy));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_min_pd(x,y);
		dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_min_pd(x,y);
		dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::power_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_pow_pd(x,y);
		dr=_mm512_add_pd(_mm512_mul_pd(_mm512_mul_pd(_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0))),y),dx),_mm512_mul_pd(_mm512_mul_pd(_mm512_log_pd(x),r),dy));
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::power_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::power_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_pow_pd(x,y);
		dr=_mm512_mul_pd(_mm512_mul_pd(_mm512_log_pd(x),r),dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::power_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_pow_pd(x,y);
		dr=_mm512_mul_pd(_mm512_mul_pd(_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0))),y),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_add_pd(x,y);
		dr=dx;
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_sub_pd(x,y);
		dr=dx;
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_subtract_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_subtract_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_sub_pd(x,y);
		dr=_mm512_sub_pd(_mm512_set1_pd(0.0),dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_mul_pd(x,y);
		dr=_mm512_mul_pd(y,dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_div_pd(x,y);
		dr=_mm512_div_pd(dx,y);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_divide_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_divide_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_div_pd(x,y);
		dr=_mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),dy),y);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_max_pd(x,y);
		dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_min_pd(x,y);
		dr=_mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		dx=_mm512_load_pd(m_dx + i);
		r=_mm512_pow_pd(x,y);
		dr=_mm512_mul_pd(_mm512_mul_pd(_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0))),y),dx);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_power_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_power_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m512d y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		dy=_mm512_load_pd(m_dy + i);
		r=_mm512_pow_pd(x,y);
		dr=_mm512_mul_pd(_mm512_mul_pd(_mm512_log_pd(x),r),dy);
		_mm512_stream_pd(m_r + i, r);
		_mm512_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m256d*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512d*>::equal_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::equal_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, wr);
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::squareroot_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::squareroot_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d r, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(_mm512_mul_pd(wr,_mm512_set1_pd(0.5)),r));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::change_sign_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::change_sign_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_sub_pd(wx, wr);
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::exponential_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::exponential_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d r, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,r));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,x));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm2_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm2_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_mul_pd(x,_mm512_set1_pd(0.69314718055994529))));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm10_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::logarithm10_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_mul_pd(x,_mm512_set1_pd(2.3025850929940459))));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::complementary_errorfunc_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::complementary_errorfunc_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_sub_pd(wx, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_exp_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),x),x))),_mm512_set1_pd(1.1283791670955126)));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,_mm512_cos_pd(x)));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),wr),_mm512_sin_pd(x)));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_mul_pd(_mm512_cos_pd(x),_mm512_cos_pd(x))));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_sqrt_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(x,x)))));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),wr),_mm512_sqrt_pd(_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(x,x)))));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::arc_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,_mm512_add_pd(_mm512_mul_pd(x,x),_mm512_set1_pd(1.0))));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,_mm512_cosh_pd(x)));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,_mm512_sinh_pd(x)));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::hyperbolic_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d r, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(wr,_mm512_sub_pd(_mm512_set1_pd(1.0), _mm512_mul_pd(r,r))));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512d*>::add_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::add_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512d wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, wr);
		_mm512_stream_pd(m_wx + i, wx);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, wr);
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::add_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::add_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, wr);
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::add_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, wr);
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512d wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, wr);
		_mm512_stream_pd(m_wx + i, wx);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_sub_pd(wy, wr);
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_sub_pd(wy, wr);
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, wr);
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512d x, y, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(y,wr));
		_mm512_stream_pd(m_wx + i, wx);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(x,wr));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d x, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(x,wr));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(y,wr));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512d y, r, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,y));
		_mm512_stream_pd(m_wx + i, wx);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),wr),y));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d y, r, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),wr),y));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,y));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512d x, y, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
		_mm512_stream_pd(m_wx + i, wx);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d x, y, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512d x, y, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
		_mm512_stream_pd(m_wx + i, wx);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d x, y, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::power_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512d x, y, r, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0)))),y));
		_mm512_stream_pd(m_wx + i, wx);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_log_pd(x)),r));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::power_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::power_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d x, r, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_log_pd(x)),r));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::power_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		y=_mm512_load_pd(m_y + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_mul_pd(wr,_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0)))),y));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::add_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, wr);
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::subtract_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, wr);
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_subtract_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_subtract_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_sub_pd(wy, wr);
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::multiply_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(y,wr));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::divide_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_div_pd(wr,y));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_divide_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_divide_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d y, r, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm512_load_pd(m_y + i);
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_div_pd(_mm512_mul_pd(_mm512_sub_pd(_mm512_set1_pd(0.0),r),wr),y));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::maximum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(x,y)),wr));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::minimum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_hss_pd(_mm512_sub_pd(y,x)),wr));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::power_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d y = _mm512_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m512d x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm512_load_pd(m_x + i);
		wr=_mm512_load_pd(m_wr + i);
		wx=_mm512_load_pd(m_wx + i);
		wx=_mm512_add_pd(wx, _mm512_mul_pd(_mm512_mul_pd(_mm512_pow_pd(x,_mm512_sub_pd(y,_mm512_set1_pd(1.0))),y),wr));
		_mm512_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m256d*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_power_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512d*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512d*>::scalar_power_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512d x = _mm512_set1_pd(_x);
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m512d r, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=_mm512_load_pd(m_r + i);
		wr=_mm512_load_pd(m_wr + i);
		wy=_mm512_load_pd(m_wy + i);
		wy=_mm512_add_pd(wy, _mm512_mul_pd(_mm512_mul_pd(_mm512_log_pd(x),r),wr));
		_mm512_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m256d*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::equal_scalar(double* _r, const double& _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::equal_scalar(double* _r, const double& _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	double *m_r = _r + offset;
	__m256d r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=x;
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::equal(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::equal(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=x;
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::squareroot(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::squareroot(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_sqrt_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::change_sign(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::change_sign(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_sub_pd(_mm256_set1_pd(0.0),x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::ceiling(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::ceiling(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_ceil_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::flooring(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::flooring(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_floor_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::heaviside_step(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::heaviside_step(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_hss_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::exponential(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::exponential(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_exp_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_log_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm2(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm2(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_log2_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm10(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm10(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_log10_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::complementary_errorfunc(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::complementary_errorfunc(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_erfc_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_sin_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_cos_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_tan_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_asin_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_acos_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_atan_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_sinh_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_cosh_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_tanh_pd(x);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256d*>::add(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		r=_mm256_add_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		r=_mm256_sub_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		r=_mm256_mul_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		r=_mm256_div_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		r=_mm256_max_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		r=_mm256_min_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		r=_mm256_pow_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_add_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_sub_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_subtract(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_subtract(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		r=_mm256_sub_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_mul_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_div_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_divide(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_divide(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		r=_mm256_div_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_max_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_min_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m256d x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_pow_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_power(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_power(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m256d y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		r=_mm256_pow_pd(x,y);
		_mm256_stream_pd(m_r + i, r);
	}

	graph_op_traits<__m128d*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::equal_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::equal_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=x;
		dr=dx;
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::squareroot_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::squareroot_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_sqrt_pd(x);
		dr=_mm256_div_pd(_mm256_mul_pd(dx,_mm256_set1_pd(0.5)),r);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::change_sign_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::change_sign_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_sub_pd(_mm256_set1_pd(0.0),x);
		dr=_mm256_sub_pd(_mm256_set1_pd(0.0),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::ceiling_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::ceiling_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_ceil_pd(x);
		dr=_mm256_set1_pd(0.0);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::flooring_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::flooring_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_floor_pd(x);
		dr=_mm256_set1_pd(0.0);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::heaviside_step_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::heaviside_step_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_hss_pd(x);
		dr=_mm256_set1_pd(0.0);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::exponential_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::exponential_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_exp_pd(x);
		dr=_mm256_mul_pd(r,dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_log_pd(x);
		dr=_mm256_div_pd(dx,x);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm2_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm2_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_log2_pd(x);
		dr=_mm256_div_pd(dx,_mm256_mul_pd(x,_mm256_set1_pd(0.69314718055994529)));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm10_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm10_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_log10_pd(x);
		dr=_mm256_div_pd(dx,_mm256_mul_pd(x,_mm256_set1_pd(2.3025850929940459)));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::complementary_errorfunc_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::complementary_errorfunc_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_erfc_pd(x);
		dr=_mm256_sub_pd(_mm256_set1_pd(0.0),_mm256_mul_pd(_mm256_mul_pd(_mm256_exp_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),x),x)),_mm256_set1_pd(1.1283791670955126)),dx));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_sin_pd(x);
		dr=_mm256_mul_pd(_mm256_cos_pd(x),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_cos_pd(x);
		dr=_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),_mm256_sin_pd(x)),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_tan_pd(x);
		dr=_mm256_div_pd(dx,_mm256_mul_pd(_mm256_cos_pd(x),_mm256_cos_pd(x)));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_asin_pd(x);
		dr=_mm256_div_pd(dx,_mm256_sqrt_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(x,x))));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_acos_pd(x);
		dr=_mm256_div_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),dx),_mm256_sqrt_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(x,x))));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_atan_pd(x);
		dr=_mm256_div_pd(dx,_mm256_add_pd(_mm256_mul_pd(x,x),_mm256_set1_pd(1.0)));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_sinh_pd(x);
		dr=_mm256_mul_pd(_mm256_cosh_pd(x),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_cosh_pd(x);
		dr=_mm256_mul_pd(_mm256_sinh_pd(x),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_tanh_pd(x);
		dr=_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(r,r)),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256d*>::add_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::add_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_add_pd(x,y);
		dr=_mm256_add_pd(dx,dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::add_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::add_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_add_pd(x,y);
		dr=dy;
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::add_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_add_pd(x,y);
		dr=dx;
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_sub_pd(x,y);
		dr=_mm256_sub_pd(dx,dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_sub_pd(x,y);
		dr=_mm256_sub_pd(_mm256_set1_pd(0.0),dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_sub_pd(x,y);
		dr=dx;
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_mul_pd(x,y);
		dr=_mm256_add_pd(_mm256_mul_pd(y,dx),_mm256_mul_pd(x,dy));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_mul_pd(x,y);
		dr=_mm256_mul_pd(x,dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_mul_pd(x,y);
		dr=_mm256_mul_pd(y,dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_div_pd(x,y);
		dr=_mm256_div_pd(_mm256_sub_pd(dx,_mm256_mul_pd(r,dy)),y);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_div_pd(x,y);
		dr=_mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),dy),y);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_div_pd(x,y);
		dr=_mm256_div_pd(dx,y);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_max_pd(x,y);
		dr=_mm256_add_pd(_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dx),_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dy));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_max_pd(x,y);
		dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_max_pd(x,y);
		dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_min_pd(x,y);
		dr=_mm256_add_pd(_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dx),_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dy));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_min_pd(x,y);
		dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_min_pd(x,y);
		dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::power_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_pow_pd(x,y);
		dr=_mm256_add_pd(_mm256_mul_pd(_mm256_mul_pd(_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0))),y),dx),_mm256_mul_pd(_mm256_mul_pd(_mm256_log_pd(x),r),dy));
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::power_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::power_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_pow_pd(x,y);
		dr=_mm256_mul_pd(_mm256_mul_pd(_mm256_log_pd(x),r),dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::power_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_pow_pd(x,y);
		dr=_mm256_mul_pd(_mm256_mul_pd(_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0))),y),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_add_pd(x,y);
		dr=dx;
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_sub_pd(x,y);
		dr=dx;
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_subtract_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_subtract_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_sub_pd(x,y);
		dr=_mm256_sub_pd(_mm256_set1_pd(0.0),dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_mul_pd(x,y);
		dr=_mm256_mul_pd(y,dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_div_pd(x,y);
		dr=_mm256_div_pd(dx,y);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_divide_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_divide_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_div_pd(x,y);
		dr=_mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),dy),y);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_max_pd(x,y);
		dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_min_pd(x,y);
		dr=_mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		dx=_mm256_load_pd(m_dx + i);
		r=_mm256_pow_pd(x,y);
		dr=_mm256_mul_pd(_mm256_mul_pd(_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0))),y),dx);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_power_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_power_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m256d y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		dy=_mm256_load_pd(m_dy + i);
		r=_mm256_pow_pd(x,y);
		dr=_mm256_mul_pd(_mm256_mul_pd(_mm256_log_pd(x),r),dy);
		_mm256_stream_pd(m_r + i, r);
		_mm256_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<__m128d*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256d*>::equal_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::equal_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, wr);
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::squareroot_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::squareroot_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d r, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(_mm256_mul_pd(wr,_mm256_set1_pd(0.5)),r));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::change_sign_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::change_sign_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_sub_pd(wx, wr);
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::exponential_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::exponential_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d r, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,r));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,x));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm2_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm2_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_mul_pd(x,_mm256_set1_pd(0.69314718055994529))));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm10_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::logarithm10_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_mul_pd(x,_mm256_set1_pd(2.3025850929940459))));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::complementary_errorfunc_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::complementary_errorfunc_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_sub_pd(wx, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_exp_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),x),x))),_mm256_set1_pd(1.1283791670955126)));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,_mm256_cos_pd(x)));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),wr),_mm256_sin_pd(x)));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_mul_pd(_mm256_cos_pd(x),_mm256_cos_pd(x))));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_sqrt_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(x,x)))));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),wr),_mm256_sqrt_pd(_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(x,x)))));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::arc_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,_mm256_add_pd(_mm256_mul_pd(x,x),_mm256_set1_pd(1.0))));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,_mm256_cosh_pd(x)));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,_mm256_sinh_pd(x)));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::hyperbolic_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d r, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(wr,_mm256_sub_pd(_mm256_set1_pd(1.0), _mm256_mul_pd(r,r))));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256d*>::add_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::add_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256d wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, wr);
		_mm256_stream_pd(m_wx + i, wx);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, wr);
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::add_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::add_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, wr);
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::add_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, wr);
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256d wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, wr);
		_mm256_stream_pd(m_wx + i, wx);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_sub_pd(wy, wr);
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_sub_pd(wy, wr);
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, wr);
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256d x, y, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(y,wr));
		_mm256_stream_pd(m_wx + i, wx);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(x,wr));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d x, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(x,wr));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(y,wr));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256d y, r, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,y));
		_mm256_stream_pd(m_wx + i, wx);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),wr),y));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d y, r, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),wr),y));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,y));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256d x, y, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
		_mm256_stream_pd(m_wx + i, wx);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d x, y, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256d x, y, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
		_mm256_stream_pd(m_wx + i, wx);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d x, y, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::power_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256d x, y, r, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0)))),y));
		_mm256_stream_pd(m_wx + i, wx);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_log_pd(x)),r));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::power_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::power_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d x, r, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_log_pd(x)),r));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::power_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		y=_mm256_load_pd(m_y + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_mul_pd(wr,_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0)))),y));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::add_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, wr);
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::subtract_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, wr);
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_subtract_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_subtract_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_sub_pd(wy, wr);
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::multiply_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(y,wr));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::divide_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_div_pd(wr,y));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_divide_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_divide_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d y, r, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm256_load_pd(m_y + i);
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_div_pd(_mm256_mul_pd(_mm256_sub_pd(_mm256_set1_pd(0.0),r),wr),y));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::maximum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(x,y)),wr));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::minimum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_hss_pd(_mm256_sub_pd(y,x)),wr));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::power_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d y = _mm256_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m256d x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm256_load_pd(m_x + i);
		wr=_mm256_load_pd(m_wr + i);
		wx=_mm256_load_pd(m_wx + i);
		wx=_mm256_add_pd(wx, _mm256_mul_pd(_mm256_mul_pd(_mm256_pow_pd(x,_mm256_sub_pd(y,_mm256_set1_pd(1.0))),y),wr));
		_mm256_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<__m128d*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_power_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256d*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256d*>::scalar_power_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256d x = _mm256_set1_pd(_x);
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m256d r, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=_mm256_load_pd(m_r + i);
		wr=_mm256_load_pd(m_wr + i);
		wy=_mm256_load_pd(m_wy + i);
		wy=_mm256_add_pd(wy, _mm256_mul_pd(_mm256_mul_pd(_mm256_log_pd(x),r),wr));
		_mm256_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<__m128d*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::equal_scalar(double* _r, const double& _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::equal_scalar(double* _r, const double& _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	double *m_r = _r + offset;
	__m128d r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		r=x;
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::equal(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::equal(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=x;
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::squareroot(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::squareroot(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_sqrt_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::change_sign(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::change_sign(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_sub_pd(_mm_set1_pd(0.0),x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::ceiling(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::ceiling(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_ceil_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::flooring(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::flooring(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_floor_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::heaviside_step(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::heaviside_step(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_hss_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::exponential(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::exponential(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_exp_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_log_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm2(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm2(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_log2_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm10(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm10(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_log10_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::complementary_errorfunc(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::complementary_errorfunc(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_erfc_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_sin_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_cos_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_tan_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_asin_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_acos_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_atan_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_sinh_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_cosh_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_tanh_pd(x);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128d*>::add(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d x, y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		r=_mm_add_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d x, y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		r=_mm_sub_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d x, y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		r=_mm_mul_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d x, y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		r=_mm_div_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d x, y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		r=_mm_max_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d x, y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		r=_mm_min_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d x, y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		r=_mm_pow_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_add_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_sub_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_subtract(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_subtract(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		r=_mm_sub_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_mul_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_div_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_divide(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_divide(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		r=_mm_div_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_max_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_min_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_scalar(double* _r, const double* _x, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset;
	double *m_r = _r + offset;
	__m128d x, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_pow_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_power(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_power(double* _r, const double& _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_y = _y + offset;
	double *m_r = _r + offset;
	__m128d y, r;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		r=_mm_pow_pd(x,y);
		_mm_stream_pd(m_r + i, r);
	}

	graph_op_traits<double*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::equal_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::equal_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=x;
		dr=dx;
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::squareroot_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::squareroot_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_sqrt_pd(x);
		dr=_mm_div_pd(_mm_mul_pd(dx,_mm_set1_pd(0.5)),r);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::change_sign_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::change_sign_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_sub_pd(_mm_set1_pd(0.0),x);
		dr=_mm_sub_pd(_mm_set1_pd(0.0),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::ceiling_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::ceiling_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_ceil_pd(x);
		dr=_mm_set1_pd(0.0);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::flooring_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::flooring_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_floor_pd(x);
		dr=_mm_set1_pd(0.0);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::heaviside_step_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::heaviside_step_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_hss_pd(x);
		dr=_mm_set1_pd(0.0);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::exponential_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::exponential_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_exp_pd(x);
		dr=_mm_mul_pd(r,dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_log_pd(x);
		dr=_mm_div_pd(dx,x);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm2_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm2_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_log2_pd(x);
		dr=_mm_div_pd(dx,_mm_mul_pd(x,_mm_set1_pd(0.69314718055994529)));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm10_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm10_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_log10_pd(x);
		dr=_mm_div_pd(dx,_mm_mul_pd(x,_mm_set1_pd(2.3025850929940459)));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::complementary_errorfunc_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::complementary_errorfunc_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_erfc_pd(x);
		dr=_mm_sub_pd(_mm_set1_pd(0.0),_mm_mul_pd(_mm_mul_pd(_mm_exp_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),x),x)),_mm_set1_pd(1.1283791670955126)),dx));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_sin_pd(x);
		dr=_mm_mul_pd(_mm_cos_pd(x),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_cos_pd(x);
		dr=_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),_mm_sin_pd(x)),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_tan_pd(x);
		dr=_mm_div_pd(dx,_mm_mul_pd(_mm_cos_pd(x),_mm_cos_pd(x)));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_asin_pd(x);
		dr=_mm_div_pd(dx,_mm_sqrt_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(x,x))));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_acos_pd(x);
		dr=_mm_div_pd(_mm_sub_pd(_mm_set1_pd(0.0),dx),_mm_sqrt_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(x,x))));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_atan_pd(x);
		dr=_mm_div_pd(dx,_mm_add_pd(_mm_mul_pd(x,x),_mm_set1_pd(1.0)));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_sinh_pd(x);
		dr=_mm_mul_pd(_mm_cosh_pd(x),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_cosh_pd(x);
		dr=_mm_mul_pd(_mm_sinh_pd(x),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_tanh_pd(x);
		dr=_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(r,r)),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128d*>::add_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::add_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_add_pd(x,y);
		dr=_mm_add_pd(dx,dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::add_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::add_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_add_pd(x,y);
		dr=dy;
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::add_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_add_pd(x,y);
		dr=dx;
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_sub_pd(x,y);
		dr=_mm_sub_pd(dx,dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_sub_pd(x,y);
		dr=_mm_sub_pd(_mm_set1_pd(0.0),dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_sub_pd(x,y);
		dr=dx;
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_mul_pd(x,y);
		dr=_mm_add_pd(_mm_mul_pd(y,dx),_mm_mul_pd(x,dy));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_mul_pd(x,y);
		dr=_mm_mul_pd(x,dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_mul_pd(x,y);
		dr=_mm_mul_pd(y,dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_div_pd(x,y);
		dr=_mm_div_pd(_mm_sub_pd(dx,_mm_mul_pd(r,dy)),y);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_div_pd(x,y);
		dr=_mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),dy),y);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_div_pd(x,y);
		dr=_mm_div_pd(dx,y);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_max_pd(x,y);
		dr=_mm_add_pd(_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dx),_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dy));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_max_pd(x,y);
		dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_max_pd(x,y);
		dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_min_pd(x,y);
		dr=_mm_add_pd(_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dx),_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dy));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_min_pd(x,y);
		dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_min_pd(x,y);
		dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::power_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_pow_pd(x,y);
		dr=_mm_add_pd(_mm_mul_pd(_mm_mul_pd(_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0))),y),dx),_mm_mul_pd(_mm_mul_pd(_mm_log_pd(x),r),dy));
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::power_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::power_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_pow_pd(x,y);
		dr=_mm_mul_pd(_mm_mul_pd(_mm_log_pd(x),r),dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::power_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, y, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_pow_pd(x,y);
		dr=_mm_mul_pd(_mm_mul_pd(_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0))),y),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_add_pd(x,y);
		dr=dx;
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_sub_pd(x,y);
		dr=dx;
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_subtract_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_subtract_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_sub_pd(x,y);
		dr=_mm_sub_pd(_mm_set1_pd(0.0),dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_mul_pd(x,y);
		dr=_mm_mul_pd(y,dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_div_pd(x,y);
		dr=_mm_div_pd(dx,y);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_divide_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_divide_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_div_pd(x,y);
		dr=_mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),dy),y);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_max_pd(x,y);
		dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_min_pd(x,y);
		dr=_mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_dx = _dx + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d x, dx, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		dx=_mm_load_pd(m_dx + i);
		r=_mm_pow_pd(x,y);
		dr=_mm_mul_pd(_mm_mul_pd(_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0))),y),dx);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_power_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_power_forward(double* _r, double* _dr, const double& _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_y = _y + offset, *m_dy = _dy + offset;
	double *m_r = _r + offset, *m_dr = _dr + offset;
	__m128d y, dy, r, dr;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		dy=_mm_load_pd(m_dy + i);
		r=_mm_pow_pd(x,y);
		dr=_mm_mul_pd(_mm_mul_pd(_mm_log_pd(x),r),dy);
		_mm_stream_pd(m_r + i, r);
		_mm_stream_pd(m_dr + i, dr);
	}

	graph_op_traits<double*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128d*>::equal_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::equal_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, wr);
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::squareroot_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::squareroot_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d r, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(_mm_mul_pd(wr,_mm_set1_pd(0.5)),r));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::change_sign_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::change_sign_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_sub_pd(wx, wr);
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::exponential_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::exponential_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d r, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(wr,r));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,x));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm2_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm2_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_mul_pd(x,_mm_set1_pd(0.69314718055994529))));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm10_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::logarithm10_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_mul_pd(x,_mm_set1_pd(2.3025850929940459))));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::complementary_errorfunc_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::complementary_errorfunc_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_sub_pd(wx, _mm_mul_pd(_mm_mul_pd(wr,_mm_exp_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),x),x))),_mm_set1_pd(1.1283791670955126)));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(wr,_mm_cos_pd(x)));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),wr),_mm_sin_pd(x)));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_mul_pd(_mm_cos_pd(x),_mm_cos_pd(x))));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_sqrt_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(x,x)))));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(_mm_sub_pd(_mm_set1_pd(0.0),wr),_mm_sqrt_pd(_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(x,x)))));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::arc_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,_mm_add_pd(_mm_mul_pd(x,x),_mm_set1_pd(1.0))));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(wr,_mm_cosh_pd(x)));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(wr,_mm_sinh_pd(x)));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::hyperbolic_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d r, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(wr,_mm_sub_pd(_mm_set1_pd(1.0), _mm_mul_pd(r,r))));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128d*>::add_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::add_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128d wr, wx, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, wr);
		_mm_stream_pd(m_wx + i, wx);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, wr);
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::add_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::add_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, wr);
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::add_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, wr);
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128d wr, wx, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, wr);
		_mm_stream_pd(m_wx + i, wx);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_sub_pd(wy, wr);
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_sub_pd(wy, wr);
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, wr);
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128d x, y, wr, wx, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(y,wr));
		_mm_stream_pd(m_wx + i, wx);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(x,wr));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d x, wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(x,wr));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d y, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(y,wr));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128d y, r, wr, wx, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,y));
		_mm_stream_pd(m_wx + i, wx);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),wr),y));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d y, r, wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),wr),y));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d y, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,y));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128d x, y, wr, wx, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
		_mm_stream_pd(m_wx + i, wx);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d x, y, wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, y, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128d x, y, wr, wx, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
		_mm_stream_pd(m_wx + i, wx);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d x, y, wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, y, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::power_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128d x, y, r, wr, wx, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_mul_pd(wr,_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0)))),y));
		_mm_stream_pd(m_wx + i, wx);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(_mm_mul_pd(wr,_mm_log_pd(x)),r));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::power_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::power_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d x, r, wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(_mm_mul_pd(wr,_mm_log_pd(x)),r));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::power_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, y, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		y=_mm_load_pd(m_y + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_mul_pd(wr,_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0)))),y));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::add_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, wr);
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::subtract_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, wr);
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_subtract_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_subtract_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_sub_pd(wy, wr);
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::multiply_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(y,wr));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::divide_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_div_pd(wr,y));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_divide_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_divide_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d y, r, wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		y=_mm_load_pd(m_y + i);
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_div_pd(_mm_mul_pd(_mm_sub_pd(_mm_set1_pd(0.0),r),wr),y));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::maximum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(x,y)),wr));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::minimum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_hss_pd(_mm_sub_pd(y,x)),wr));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::power_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d y = _mm_set1_pd(_y);
	const double *m_x = _x + offset, *m_wr = _wr + offset;
	double *m_wx = _wx + offset;
	__m128d x, wr, wx;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		x=_mm_load_pd(m_x + i);
		wr=_mm_load_pd(m_wr + i);
		wx=_mm_load_pd(m_wx + i);
		wx=_mm_add_pd(wx, _mm_mul_pd(_mm_mul_pd(_mm_pow_pd(x,_mm_sub_pd(y,_mm_set1_pd(1.0))),y),wr));
		_mm_stream_pd(m_wx + i, wx);
	}

	graph_op_traits<double*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_power_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128d*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128d*>::scalar_power_backward(const double* _r, const double* _wr, const double& _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128d x = _mm_set1_pd(_x);
	const double *m_r = _r + offset, *m_wr = _wr + offset;
	double *m_wy = _wy + offset;
	__m128d r, wr, wy;

	if (n >= 2) for (; i < n - 1; i += 2)
	{
		r=_mm_load_pd(m_r + i);
		wr=_mm_load_pd(m_wr + i);
		wy=_mm_load_pd(m_wy + i);
		wy=_mm_add_pd(wy, _mm_mul_pd(_mm_mul_pd(_mm_log_pd(x),r),wr));
		_mm_stream_pd(m_wy + i, wy);
	}

	graph_op_traits<double*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::equal_scalar(double* _r, const double& x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::equal_scalar(_r, x, offset, n, i);
}

void graph_op_traits<double*>::equal_scalar(double* _r, const double& x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x;
}

void graph_op_traits<double*>::equal(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::equal(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i];
}

void graph_op_traits<double*>::squareroot(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::squareroot(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::sqrt(x[i]);
}

void graph_op_traits<double*>::change_sign(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::change_sign(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=-x[i];
}

void graph_op_traits<double*>::ceiling(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::ceiling(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::ceil(x[i]);
}

void graph_op_traits<double*>::flooring(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::flooring(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::floor(x[i]);
}

void graph_op_traits<double*>::heaviside_step(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::heaviside_step(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=hss(x[i]);
}

void graph_op_traits<double*>::exponential(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::exponential(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::exp(x[i]);
}

void graph_op_traits<double*>::logarithm(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::logarithm(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::log(x[i]);
}

void graph_op_traits<double*>::logarithm2(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::logarithm2(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::log2(x[i]);
}

void graph_op_traits<double*>::logarithm10(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::logarithm10(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::log10(x[i]);
}

void graph_op_traits<double*>::complementary_errorfunc(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::complementary_errorfunc(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::erfc(x[i]);
}

void graph_op_traits<double*>::sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::sin(x[i]);
}

void graph_op_traits<double*>::cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::cos(x[i]);
}

void graph_op_traits<double*>::tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::tan(x[i]);
}

void graph_op_traits<double*>::arc_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::arc_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::asin(x[i]);
}

void graph_op_traits<double*>::arc_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::arc_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::acos(x[i]);
}

void graph_op_traits<double*>::arc_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::arc_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::atan(x[i]);
}

void graph_op_traits<double*>::hyperbolic_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_sine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::sinh(x[i]);
}

void graph_op_traits<double*>::hyperbolic_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_cosine(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::cosh(x[i]);
}

void graph_op_traits<double*>::hyperbolic_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_tangent(double* _r, const double* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::tanh(x[i]);
}

void graph_op_traits<double*>::add(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<double*>::add(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]+y[i];
}

void graph_op_traits<double*>::subtract(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<double*>::subtract(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]-y[i];
}

void graph_op_traits<double*>::multiply(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<double*>::multiply(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]*y[i];
}

void graph_op_traits<double*>::divide(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<double*>::divide(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]/y[i];
}

void graph_op_traits<double*>::maximum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<double*>::maximum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::max(x[i],y[i]);
}

void graph_op_traits<double*>::minimum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<double*>::minimum(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::min(x[i],y[i]);
}

void graph_op_traits<double*>::power(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<double*>::power(double* _r, const double* _x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::pow(x[i],y[i]);
}

void graph_op_traits<double*>::add_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<double*>::add_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]+y;
}

void graph_op_traits<double*>::subtract_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<double*>::subtract_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]-y;
}

void graph_op_traits<double*>::scalar_subtract(double* _r, const double& x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_subtract(_r, x, _y, offset, n, i);
}

void graph_op_traits<double*>::scalar_subtract(double* _r, const double& x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x-y[i];
}

void graph_op_traits<double*>::multiply_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<double*>::multiply_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]*y;
}

void graph_op_traits<double*>::divide_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<double*>::divide_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]/y;
}

void graph_op_traits<double*>::scalar_divide(double* _r, const double& x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_divide(_r, x, _y, offset, n, i);
}

void graph_op_traits<double*>::scalar_divide(double* _r, const double& x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x/y[i];
}

void graph_op_traits<double*>::maximum_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<double*>::maximum_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::max(x[i],y);
}

void graph_op_traits<double*>::minimum_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<double*>::minimum_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::min(x[i],y);
}

void graph_op_traits<double*>::power_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<double*>::power_scalar(double* _r, const double* _x, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::pow(x[i],y);
}

void graph_op_traits<double*>::scalar_power(double* _r, const double& x, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_power(_r, x, _y, offset, n, i);
}

void graph_op_traits<double*>::scalar_power(double* _r, const double& x, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset;
	double *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::pow(x,y[i]);
}

void graph_op_traits<double*>::equal_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::equal_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i];
		dr[i]=dx[i];
	}
}

void graph_op_traits<double*>::squareroot_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::squareroot_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::sqrt(x[i]);
		dr[i]=dx[i]*0.5/r[i];
	}
}

void graph_op_traits<double*>::change_sign_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::change_sign_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=-x[i];
		dr[i]=-dx[i];
	}
}

void graph_op_traits<double*>::ceiling_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::ceiling_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::ceil(x[i]);
		dr[i]=0;
	}
}

void graph_op_traits<double*>::flooring_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::flooring_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::floor(x[i]);
		dr[i]=0;
	}
}

void graph_op_traits<double*>::heaviside_step_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::heaviside_step_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=hss(x[i]);
		dr[i]=0;
	}
}

void graph_op_traits<double*>::exponential_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::exponential_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::exp(x[i]);
		dr[i]=r[i]*dx[i];
	}
}

void graph_op_traits<double*>::logarithm_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::logarithm_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::log(x[i]);
		dr[i]=dx[i]/x[i];
	}
}

void graph_op_traits<double*>::logarithm2_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::logarithm2_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::log2(x[i]);
		dr[i]=dx[i]/(x[i]*0.69314718055994529);
	}
}

void graph_op_traits<double*>::logarithm10_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::logarithm10_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::log10(x[i]);
		dr[i]=dx[i]/(x[i]*2.3025850929940459);
	}
}

void graph_op_traits<double*>::complementary_errorfunc_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::complementary_errorfunc_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::erfc(x[i]);
		dr[i]=-std::exp(-x[i]*x[i])*1.1283791670955126*dx[i];
	}
}

void graph_op_traits<double*>::sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::sin(x[i]);
		dr[i]=std::cos(x[i])*dx[i];
	}
}

void graph_op_traits<double*>::cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::cos(x[i]);
		dr[i]=-std::sin(x[i])*dx[i];
	}
}

void graph_op_traits<double*>::tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::tan(x[i]);
		dr[i]=dx[i]/(std::cos(x[i])*std::cos(x[i]));
	}
}

void graph_op_traits<double*>::arc_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::arc_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::asin(x[i]);
		dr[i]=dx[i]/std::sqrt(1.0-x[i]*x[i]);
	}
}

void graph_op_traits<double*>::arc_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::arc_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::acos(x[i]);
		dr[i]=-dx[i]/std::sqrt(1.0-x[i]*x[i]);
	}
}

void graph_op_traits<double*>::arc_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::arc_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::atan(x[i]);
		dr[i]=dx[i]/(x[i]*x[i]+1.0);
	}
}

void graph_op_traits<double*>::hyperbolic_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_sine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::sinh(x[i]);
		dr[i]=std::cosh(x[i])*dx[i];
	}
}

void graph_op_traits<double*>::hyperbolic_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_cosine_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::cosh(x[i]);
		dr[i]=std::sinh(x[i])*dx[i];
	}
}

void graph_op_traits<double*>::hyperbolic_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_tangent_forward(double* _r, double* _dr, const double* _x, const double* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::tanh(x[i]);
		dr[i]=(1.0-r[i]*r[i])*dx[i];
	}
}

void graph_op_traits<double*>::add_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::add_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]+y[i];
		dr[i]=dx[i]+dy[i];
	}
}

void graph_op_traits<double*>::add_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::add_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]+y[i];
		dr[i]=dy[i];
	}
}

void graph_op_traits<double*>::add_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<double*>::add_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]+y[i];
		dr[i]=dx[i];
	}
}

void graph_op_traits<double*>::subtract_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::subtract_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]-y[i];
		dr[i]=dx[i]-dy[i];
	}
}

void graph_op_traits<double*>::subtract_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::subtract_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]-y[i];
		dr[i]=-dy[i];
	}
}

void graph_op_traits<double*>::subtract_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<double*>::subtract_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]-y[i];
		dr[i]=dx[i];
	}
}

void graph_op_traits<double*>::multiply_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::multiply_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]*y[i];
		dr[i]=y[i]*dx[i]+x[i]*dy[i];
	}
}

void graph_op_traits<double*>::multiply_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::multiply_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]*y[i];
		dr[i]=x[i]*dy[i];
	}
}

void graph_op_traits<double*>::multiply_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<double*>::multiply_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]*y[i];
		dr[i]=y[i]*dx[i];
	}
}

void graph_op_traits<double*>::divide_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::divide_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]/y[i];
		dr[i]=(dx[i]-r[i]*dy[i])/y[i];
	}
}

void graph_op_traits<double*>::divide_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::divide_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]/y[i];
		dr[i]=-r[i]*dy[i]/y[i];
	}
}

void graph_op_traits<double*>::divide_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<double*>::divide_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]/y[i];
		dr[i]=dx[i]/y[i];
	}
}

void graph_op_traits<double*>::maximum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::maximum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::max(x[i],y[i]);
		dr[i]=hss(x[i]-y[i])*dx[i]+hss(y[i]-x[i])*dy[i];
	}
}

void graph_op_traits<double*>::maximum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::maximum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::max(x[i],y[i]);
		dr[i]=hss(y[i]-x[i])*dy[i];
	}
}

void graph_op_traits<double*>::maximum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<double*>::maximum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::max(x[i],y[i]);
		dr[i]=hss(x[i]-y[i])*dx[i];
	}
}

void graph_op_traits<double*>::minimum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::minimum_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::min(x[i],y[i]);
		dr[i]=hss(y[i]-x[i])*dx[i]+hss(x[i]-y[i])*dy[i];
	}
}

void graph_op_traits<double*>::minimum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::minimum_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::min(x[i],y[i]);
		dr[i]=hss(x[i]-y[i])*dy[i];
	}
}

void graph_op_traits<double*>::minimum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<double*>::minimum_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::min(x[i],y[i]);
		dr[i]=hss(y[i]-x[i])*dx[i];
	}
}

void graph_op_traits<double*>::power_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::power_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x[i],y[i]);
		dr[i]=std::pow(x[i],y[i]-1.0)*y[i]*dx[i]+std::log(x[i])*r[i]*dy[i];
	}
}

void graph_op_traits<double*>::power_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::power_px_forward(double* _r, double* _dr, const double* _x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x[i],y[i]);
		dr[i]=std::log(x[i])*r[i]*dy[i];
	}
}

void graph_op_traits<double*>::power_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<double*>::power_py_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x[i],y[i]);
		dr[i]=std::pow(x[i],y[i]-1.0)*y[i]*dx[i];
	}
}

void graph_op_traits<double*>::add_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<double*>::add_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]+y;
		dr[i]=dx[i];
	}
}

void graph_op_traits<double*>::subtract_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<double*>::subtract_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]-y;
		dr[i]=dx[i];
	}
}

void graph_op_traits<double*>::scalar_subtract_forward(double* _r, double* _dr, const double& x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_subtract_forward(_r, _dr, x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::scalar_subtract_forward(double* _r, double* _dr, const double& x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x-y[i];
		dr[i]=-dy[i];
	}
}

void graph_op_traits<double*>::multiply_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<double*>::multiply_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]*y;
		dr[i]=y*dx[i];
	}
}

void graph_op_traits<double*>::divide_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<double*>::divide_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]/y;
		dr[i]=dx[i]/y;
	}
}

void graph_op_traits<double*>::scalar_divide_forward(double* _r, double* _dr, const double& x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_divide_forward(_r, _dr, x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::scalar_divide_forward(double* _r, double* _dr, const double& x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x/y[i];
		dr[i]=-r[i]*dy[i]/y[i];
	}
}

void graph_op_traits<double*>::maximum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<double*>::maximum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::max(x[i],y);
		dr[i]=hss(x[i]-y)*dx[i];
	}
}

void graph_op_traits<double*>::minimum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<double*>::minimum_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::min(x[i],y);
		dr[i]=hss(y-x[i])*dx[i];
	}
}

void graph_op_traits<double*>::power_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<double*>::power_scalar_forward(double* _r, double* _dr, const double* _x, const double* _dx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *dx = _dx + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x[i],y);
		dr[i]=std::pow(x[i],y-1.0)*y*dx[i];
	}
}

void graph_op_traits<double*>::scalar_power_forward(double* _r, double* _dr, const double& x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_power_forward(_r, _dr, x, _y, _dy, offset, n, i);
}

void graph_op_traits<double*>::scalar_power_forward(double* _r, double* _dr, const double& x, const double* _y, const double* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset, *dy = _dy + offset;
	double *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x,y[i]);
		dr[i]=std::log(x)*r[i]*dy[i];
	}
}

void graph_op_traits<double*>::equal_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::equal_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<double*>::squareroot_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::squareroot_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *r = _r + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*0.5/r[i];
}

void graph_op_traits<double*>::change_sign_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::change_sign_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]-=wr[i];
}

void graph_op_traits<double*>::exponential_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::exponential_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *r = _r + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*r[i];
}

void graph_op_traits<double*>::logarithm_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::logarithm_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/x[i];
}

void graph_op_traits<double*>::logarithm2_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::logarithm2_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/(x[i]*0.69314718055994529);
}

void graph_op_traits<double*>::logarithm10_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::logarithm10_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/(x[i]*2.3025850929940459);
}

void graph_op_traits<double*>::complementary_errorfunc_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::complementary_errorfunc_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]-=wr[i]*std::exp(-x[i]*x[i])*1.1283791670955126;
}

void graph_op_traits<double*>::sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*std::cos(x[i]);
}

void graph_op_traits<double*>::cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=-wr[i]*std::sin(x[i]);
}

void graph_op_traits<double*>::tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/(std::cos(x[i])*std::cos(x[i]));
}

void graph_op_traits<double*>::arc_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::arc_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/std::sqrt(1.0-x[i]*x[i]);
}

void graph_op_traits<double*>::arc_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::arc_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=-wr[i]/std::sqrt(1.0-x[i]*x[i]);
}

void graph_op_traits<double*>::arc_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::arc_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/(x[i]*x[i]+1.0);
}

void graph_op_traits<double*>::hyperbolic_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_sine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*std::cosh(x[i]);
}

void graph_op_traits<double*>::hyperbolic_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_cosine_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*std::sinh(x[i]);
}

void graph_op_traits<double*>::hyperbolic_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<double*>::hyperbolic_tangent_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *r = _r + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*(1.0-r[i]*r[i]);
}

void graph_op_traits<double*>::add_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::add_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=wr[i];
		wy[i]+=wr[i];
	}
}

void graph_op_traits<double*>::add_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::add_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=wr[i];
}

void graph_op_traits<double*>::add_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<double*>::add_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<double*>::subtract_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::subtract_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=wr[i];
		wy[i]-=wr[i];
	}
}

void graph_op_traits<double*>::subtract_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::subtract_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]-=wr[i];
}

void graph_op_traits<double*>::subtract_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<double*>::subtract_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<double*>::multiply_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::multiply_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	double *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=y[i]*wr[i];
		wy[i]+=x[i]*wr[i];
	}
}

void graph_op_traits<double*>::multiply_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::multiply_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=x[i]*wr[i];
}

void graph_op_traits<double*>::multiply_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<double*>::multiply_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=y[i]*wr[i];
}

void graph_op_traits<double*>::divide_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::divide_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset, *r = _r + offset, *wr = _wr + offset;
	double *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=wr[i]/y[i];
		wy[i]+=-r[i]*wr[i]/y[i];
	}
}

void graph_op_traits<double*>::divide_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::divide_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset, *r = _r + offset, *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=-r[i]*wr[i]/y[i];
}

void graph_op_traits<double*>::divide_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<double*>::divide_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/y[i];
}

void graph_op_traits<double*>::maximum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::maximum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	double *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=hss(x[i]-y[i])*wr[i];
		wy[i]+=hss(y[i]-x[i])*wr[i];
	}
}

void graph_op_traits<double*>::maximum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::maximum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=hss(y[i]-x[i])*wr[i];
}

void graph_op_traits<double*>::maximum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<double*>::maximum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=hss(x[i]-y[i])*wr[i];
}

void graph_op_traits<double*>::minimum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::minimum_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	double *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=hss(y[i]-x[i])*wr[i];
		wy[i]+=hss(x[i]-y[i])*wr[i];
	}
}

void graph_op_traits<double*>::minimum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::minimum_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=hss(x[i]-y[i])*wr[i];
}

void graph_op_traits<double*>::minimum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<double*>::minimum_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=hss(y[i]-x[i])*wr[i];
}

void graph_op_traits<double*>::power_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::power_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *r = _r + offset, *wr = _wr + offset;
	double *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=wr[i]*std::pow(x[i],y[i]-1.0)*y[i];
		wy[i]+=wr[i]*std::log(x[i])*r[i];
	}
}

void graph_op_traits<double*>::power_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::power_px_backward(const double* _r, const double* _wr, const double* _x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *r = _r + offset, *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=wr[i]*std::log(x[i])*r[i];
}

void graph_op_traits<double*>::power_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<double*>::power_py_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*std::pow(x[i],y[i]-1.0)*y[i];
}

void graph_op_traits<double*>::add_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::add_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<double*>::add_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<double*>::subtract_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::subtract_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<double*>::subtract_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<double*>::scalar_subtract_backward(const double* _r, const double* _wr, const double& x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_subtract_backward(_r, _wr, x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::scalar_subtract_backward(const double* _r, const double* _wr, const double& x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]-=wr[i];
}

void graph_op_traits<double*>::multiply_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::multiply_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<double*>::multiply_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=y*wr[i];
}

void graph_op_traits<double*>::divide_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::divide_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<double*>::divide_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/y;
}

void graph_op_traits<double*>::scalar_divide_backward(const double* _r, const double* _wr, const double& x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_divide_backward(_r, _wr, x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::scalar_divide_backward(const double* _r, const double* _wr, const double& x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *y = _y + offset, *r = _r + offset, *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=-r[i]*wr[i]/y[i];
}

void graph_op_traits<double*>::maximum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::maximum_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<double*>::maximum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=hss(x[i]-y)*wr[i];
}

void graph_op_traits<double*>::minimum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::minimum_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<double*>::minimum_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=hss(y-x[i])*wr[i];
}

void graph_op_traits<double*>::power_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::power_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<double*>::power_scalar_backward(const double* _r, const double* _wr, const double* _x, double* _wx, const double& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *x = _x + offset, *wr = _wr + offset;
	double *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=std::pow(x[i],y-1.0)*y*wr[i];
}

void graph_op_traits<double*>::scalar_power_backward(const double* _r, const double* _wr, const double& x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<double*>::scalar_power_backward(_r, _wr, x, _y, _wy, offset, n, i);
}

void graph_op_traits<double*>::scalar_power_backward(const double* _r, const double* _wr, const double& x, const double* _y, double* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const double *r = _r + offset, *wr = _wr + offset;
	double *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=std::log(x)*r[i]*wr[i];
}

void graph_op_traits<__m512*>::equal_scalar(float* _r, const float& _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::equal_scalar(float* _r, const float& _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	float *m_r = _r + offset;
	__m512 r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		r=x;
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::equal(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::equal(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=x;
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::squareroot(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::squareroot(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_sqrt_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::change_sign(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::change_sign(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_sub_ps(_mm512_set1_ps(0.0),x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::ceiling(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::ceiling(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_ceil_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::flooring(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::flooring(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_floor_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::heaviside_step(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::heaviside_step(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_hss_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::exponential(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::exponential(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_exp_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_log_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm2(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm2(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_log2_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm10(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm10(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_log10_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::complementary_errorfunc(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::complementary_errorfunc(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_erfc_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_sin_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_cos_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_tan_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::arc_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::arc_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_asin_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::arc_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::arc_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_acos_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::arc_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::arc_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_atan_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_sinh_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_cosh_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_tanh_ps(x);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m512*>::add(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 x, y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		r=_mm512_add_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 x, y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		r=_mm512_sub_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 x, y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		r=_mm512_mul_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 x, y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		r=_mm512_div_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 x, y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		r=_mm512_max_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 x, y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		r=_mm512_min_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 x, y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		r=_mm512_pow_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_add_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_sub_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_subtract(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_subtract(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		r=_mm512_sub_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_mul_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_div_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_divide(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_divide(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		r=_mm512_div_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_max_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_min_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m512 x, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_pow_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_power(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_power(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m512 y, r;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		r=_mm512_pow_ps(x,y);
		_mm512_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m256*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m512*>::equal_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::equal_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=x;
		dr=dx;
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::squareroot_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::squareroot_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_sqrt_ps(x);
		dr=_mm512_div_ps(_mm512_mul_ps(dx,_mm512_set1_ps(0.5f)),r);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::change_sign_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::change_sign_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_sub_ps(_mm512_set1_ps(0.0),x);
		dr=_mm512_sub_ps(_mm512_set1_ps(0.0),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::ceiling_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::ceiling_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_ceil_ps(x);
		dr=_mm512_set1_ps(0.0);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::flooring_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::flooring_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_floor_ps(x);
		dr=_mm512_set1_ps(0.0);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::heaviside_step_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::heaviside_step_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_hss_ps(x);
		dr=_mm512_set1_ps(0.0);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::exponential_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::exponential_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_exp_ps(x);
		dr=_mm512_mul_ps(r,dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_log_ps(x);
		dr=_mm512_div_ps(dx,x);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm2_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm2_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_log2_ps(x);
		dr=_mm512_div_ps(dx,_mm512_mul_ps(x,_mm512_set1_ps(0.69314718055994529f)));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm10_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm10_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_log10_ps(x);
		dr=_mm512_div_ps(dx,_mm512_mul_ps(x,_mm512_set1_ps(2.3025850929940459f)));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::complementary_errorfunc_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::complementary_errorfunc_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_erfc_ps(x);
		dr=_mm512_sub_ps(_mm512_set1_ps(0.0),_mm512_mul_ps(_mm512_mul_ps(_mm512_exp_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),x),x)),_mm512_set1_ps(1.1283791670955126f)),dx));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_sin_ps(x);
		dr=_mm512_mul_ps(_mm512_cos_ps(x),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_cos_ps(x);
		dr=_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),_mm512_sin_ps(x)),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_tan_ps(x);
		dr=_mm512_div_ps(dx,_mm512_mul_ps(_mm512_cos_ps(x),_mm512_cos_ps(x)));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_asin_ps(x);
		dr=_mm512_div_ps(dx,_mm512_sqrt_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(x,x))));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_acos_ps(x);
		dr=_mm512_div_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),dx),_mm512_sqrt_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(x,x))));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_atan_ps(x);
		dr=_mm512_div_ps(dx,_mm512_add_ps(_mm512_mul_ps(x,x),_mm512_set1_ps(1.0f)));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_sinh_ps(x);
		dr=_mm512_mul_ps(_mm512_cosh_ps(x),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_cosh_ps(x);
		dr=_mm512_mul_ps(_mm512_sinh_ps(x),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_tanh_ps(x);
		dr=_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(r,r)),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m512*>::add_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::add_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_add_ps(x,y);
		dr=_mm512_add_ps(dx,dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::add_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::add_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_add_ps(x,y);
		dr=dy;
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::add_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_add_ps(x,y);
		dr=dx;
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_sub_ps(x,y);
		dr=_mm512_sub_ps(dx,dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_sub_ps(x,y);
		dr=_mm512_sub_ps(_mm512_set1_ps(0.0),dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_sub_ps(x,y);
		dr=dx;
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_mul_ps(x,y);
		dr=_mm512_add_ps(_mm512_mul_ps(y,dx),_mm512_mul_ps(x,dy));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_mul_ps(x,y);
		dr=_mm512_mul_ps(x,dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_mul_ps(x,y);
		dr=_mm512_mul_ps(y,dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::divide_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_div_ps(x,y);
		dr=_mm512_div_ps(_mm512_sub_ps(dx,_mm512_mul_ps(r,dy)),y);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::divide_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::divide_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_div_ps(x,y);
		dr=_mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),dy),y);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::divide_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_div_ps(x,y);
		dr=_mm512_div_ps(dx,y);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_max_ps(x,y);
		dr=_mm512_add_ps(_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dx),_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dy));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_max_ps(x,y);
		dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_max_ps(x,y);
		dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_min_ps(x,y);
		dr=_mm512_add_ps(_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dx),_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dy));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_min_ps(x,y);
		dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_min_ps(x,y);
		dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::power_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_pow_ps(x,y);
		dr=_mm512_add_ps(_mm512_mul_ps(_mm512_mul_ps(_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f))),y),dx),_mm512_mul_ps(_mm512_mul_ps(_mm512_log_ps(x),r),dy));
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::power_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::power_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_pow_ps(x,y);
		dr=_mm512_mul_ps(_mm512_mul_ps(_mm512_log_ps(x),r),dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::power_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, y, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_pow_ps(x,y);
		dr=_mm512_mul_ps(_mm512_mul_ps(_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f))),y),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_add_ps(x,y);
		dr=dx;
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_sub_ps(x,y);
		dr=dx;
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_subtract_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_subtract_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_sub_ps(x,y);
		dr=_mm512_sub_ps(_mm512_set1_ps(0.0),dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_mul_ps(x,y);
		dr=_mm512_mul_ps(y,dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_div_ps(x,y);
		dr=_mm512_div_ps(dx,y);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_divide_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_divide_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_div_ps(x,y);
		dr=_mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),dy),y);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_max_ps(x,y);
		dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_min_ps(x,y);
		dr=_mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 x, dx, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		dx=_mm512_load_ps(m_dx + i);
		r=_mm512_pow_ps(x,y);
		dr=_mm512_mul_ps(_mm512_mul_ps(_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f))),y),dx);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_power_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_power_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m512 y, dy, r, dr;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		dy=_mm512_load_ps(m_dy + i);
		r=_mm512_pow_ps(x,y);
		dr=_mm512_mul_ps(_mm512_mul_ps(_mm512_log_ps(x),r),dy);
		_mm512_stream_ps(m_r + i, r);
		_mm512_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m256*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m512*>::equal_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::equal_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, wr);
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::squareroot_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::squareroot_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 r, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(_mm512_mul_ps(wr,_mm512_set1_ps(0.5f)),r));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::change_sign_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::change_sign_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_sub_ps(wx, wr);
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::exponential_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::exponential_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 r, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,r));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,x));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm2_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm2_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_mul_ps(x,_mm512_set1_ps(0.69314718055994529f))));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm10_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::logarithm10_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_mul_ps(x,_mm512_set1_ps(2.3025850929940459f))));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::complementary_errorfunc_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::complementary_errorfunc_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_sub_ps(wx, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_exp_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),x),x))),_mm512_set1_ps(1.1283791670955126f)));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,_mm512_cos_ps(x)));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),wr),_mm512_sin_ps(x)));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_mul_ps(_mm512_cos_ps(x),_mm512_cos_ps(x))));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_sqrt_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(x,x)))));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),wr),_mm512_sqrt_ps(_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(x,x)))));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::arc_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,_mm512_add_ps(_mm512_mul_ps(x,x),_mm512_set1_ps(1.0f))));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,_mm512_cosh_ps(x)));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,_mm512_sinh_ps(x)));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::hyperbolic_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 r, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(wr,_mm512_sub_ps(_mm512_set1_ps(1.0f), _mm512_mul_ps(r,r))));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m512*>::add_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::add_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512 wr, wx, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, wr);
		_mm512_stream_ps(m_wx + i, wx);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, wr);
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::add_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::add_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, wr);
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::add_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, wr);
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512 wr, wx, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, wr);
		_mm512_stream_ps(m_wx + i, wx);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_sub_ps(wy, wr);
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_sub_ps(wy, wr);
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, wr);
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512 x, y, wr, wx, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(y,wr));
		_mm512_stream_ps(m_wx + i, wx);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(x,wr));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 x, wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(x,wr));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 y, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(y,wr));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::divide_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512 y, r, wr, wx, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,y));
		_mm512_stream_ps(m_wx + i, wx);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),wr),y));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::divide_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::divide_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 y, r, wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),wr),y));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::divide_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 y, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,y));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512 x, y, wr, wx, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
		_mm512_stream_ps(m_wx + i, wx);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 x, y, wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, y, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512 x, y, wr, wx, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
		_mm512_stream_ps(m_wx + i, wx);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 x, y, wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, y, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::power_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m512 x, y, r, wr, wx, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f)))),y));
		_mm512_stream_ps(m_wx + i, wx);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_log_ps(x)),r));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::power_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::power_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 x, r, wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_log_ps(x)),r));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::power_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, y, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		y=_mm512_load_ps(m_y + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_mul_ps(wr,_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f)))),y));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::add_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, wr);
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::subtract_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, wr);
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_subtract_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_subtract_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_sub_ps(wy, wr);
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::multiply_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(y,wr));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::divide_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_div_ps(wr,y));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_divide_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_divide_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 y, r, wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		y=_mm512_load_ps(m_y + i);
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_div_ps(_mm512_mul_ps(_mm512_sub_ps(_mm512_set1_ps(0.0),r),wr),y));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::maximum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(x,y)),wr));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::minimum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_hss_ps(_mm512_sub_ps(y,x)),wr));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::power_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 y = _mm512_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m512 x, wr, wx;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		x=_mm512_load_ps(m_x + i);
		wr=_mm512_load_ps(m_wr + i);
		wx=_mm512_load_ps(m_wx + i);
		wx=_mm512_add_ps(wx, _mm512_mul_ps(_mm512_mul_ps(_mm512_pow_ps(x,_mm512_sub_ps(y,_mm512_set1_ps(1.0f))),y),wr));
		_mm512_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m256*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_power_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m512*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m512*>::scalar_power_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m512 x = _mm512_set1_ps(_x);
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m512 r, wr, wy;

	if (n >= 16) for (; i < n - 15; i += 16)
	{
		r=_mm512_load_ps(m_r + i);
		wr=_mm512_load_ps(m_wr + i);
		wy=_mm512_load_ps(m_wy + i);
		wy=_mm512_add_ps(wy, _mm512_mul_ps(_mm512_mul_ps(_mm512_log_ps(x),r),wr));
		_mm512_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m256*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::equal_scalar(float* _r, const float& _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::equal_scalar(float* _r, const float& _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	float *m_r = _r + offset;
	__m256 r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=x;
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::equal(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::equal(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=x;
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::squareroot(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::squareroot(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_sqrt_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::change_sign(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::change_sign(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_sub_ps(_mm256_set1_ps(0.0),x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::ceiling(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::ceiling(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_ceil_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::flooring(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::flooring(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_floor_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::heaviside_step(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::heaviside_step(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_hss_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::exponential(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::exponential(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_exp_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_log_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm2(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm2(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_log2_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm10(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm10(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_log10_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::complementary_errorfunc(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::complementary_errorfunc(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_erfc_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_sin_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_cos_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_tan_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::arc_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::arc_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_asin_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::arc_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::arc_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_acos_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::arc_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::arc_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_atan_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_sinh_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_cosh_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_tanh_ps(x);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m256*>::add(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		r=_mm256_add_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		r=_mm256_sub_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		r=_mm256_mul_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		r=_mm256_div_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		r=_mm256_max_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		r=_mm256_min_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 x, y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		r=_mm256_pow_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_add_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_sub_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_subtract(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_subtract(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		r=_mm256_sub_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_mul_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_div_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_divide(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_divide(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		r=_mm256_div_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_max_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_min_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m256 x, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_pow_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_power(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_power(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m256 y, r;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		r=_mm256_pow_ps(x,y);
		_mm256_stream_ps(m_r + i, r);
	}

	graph_op_traits<__m128*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m256*>::equal_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::equal_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=x;
		dr=dx;
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::squareroot_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::squareroot_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_sqrt_ps(x);
		dr=_mm256_div_ps(_mm256_mul_ps(dx,_mm256_set1_ps(0.5f)),r);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::change_sign_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::change_sign_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_sub_ps(_mm256_set1_ps(0.0),x);
		dr=_mm256_sub_ps(_mm256_set1_ps(0.0),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::ceiling_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::ceiling_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_ceil_ps(x);
		dr=_mm256_set1_ps(0.0);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::flooring_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::flooring_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_floor_ps(x);
		dr=_mm256_set1_ps(0.0);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::heaviside_step_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::heaviside_step_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_hss_ps(x);
		dr=_mm256_set1_ps(0.0);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::exponential_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::exponential_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_exp_ps(x);
		dr=_mm256_mul_ps(r,dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_log_ps(x);
		dr=_mm256_div_ps(dx,x);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm2_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm2_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_log2_ps(x);
		dr=_mm256_div_ps(dx,_mm256_mul_ps(x,_mm256_set1_ps(0.69314718055994529f)));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm10_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm10_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_log10_ps(x);
		dr=_mm256_div_ps(dx,_mm256_mul_ps(x,_mm256_set1_ps(2.3025850929940459f)));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::complementary_errorfunc_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::complementary_errorfunc_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_erfc_ps(x);
		dr=_mm256_sub_ps(_mm256_set1_ps(0.0),_mm256_mul_ps(_mm256_mul_ps(_mm256_exp_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),x),x)),_mm256_set1_ps(1.1283791670955126f)),dx));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_sin_ps(x);
		dr=_mm256_mul_ps(_mm256_cos_ps(x),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_cos_ps(x);
		dr=_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),_mm256_sin_ps(x)),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_tan_ps(x);
		dr=_mm256_div_ps(dx,_mm256_mul_ps(_mm256_cos_ps(x),_mm256_cos_ps(x)));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_asin_ps(x);
		dr=_mm256_div_ps(dx,_mm256_sqrt_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(x,x))));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_acos_ps(x);
		dr=_mm256_div_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),dx),_mm256_sqrt_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(x,x))));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_atan_ps(x);
		dr=_mm256_div_ps(dx,_mm256_add_ps(_mm256_mul_ps(x,x),_mm256_set1_ps(1.0f)));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_sinh_ps(x);
		dr=_mm256_mul_ps(_mm256_cosh_ps(x),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_cosh_ps(x);
		dr=_mm256_mul_ps(_mm256_sinh_ps(x),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_tanh_ps(x);
		dr=_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(r,r)),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m256*>::add_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::add_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_add_ps(x,y);
		dr=_mm256_add_ps(dx,dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::add_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::add_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_add_ps(x,y);
		dr=dy;
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::add_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_add_ps(x,y);
		dr=dx;
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_sub_ps(x,y);
		dr=_mm256_sub_ps(dx,dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_sub_ps(x,y);
		dr=_mm256_sub_ps(_mm256_set1_ps(0.0),dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_sub_ps(x,y);
		dr=dx;
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_mul_ps(x,y);
		dr=_mm256_add_ps(_mm256_mul_ps(y,dx),_mm256_mul_ps(x,dy));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_mul_ps(x,y);
		dr=_mm256_mul_ps(x,dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_mul_ps(x,y);
		dr=_mm256_mul_ps(y,dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::divide_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_div_ps(x,y);
		dr=_mm256_div_ps(_mm256_sub_ps(dx,_mm256_mul_ps(r,dy)),y);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::divide_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::divide_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_div_ps(x,y);
		dr=_mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),dy),y);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::divide_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_div_ps(x,y);
		dr=_mm256_div_ps(dx,y);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_max_ps(x,y);
		dr=_mm256_add_ps(_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dx),_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dy));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_max_ps(x,y);
		dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_max_ps(x,y);
		dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_min_ps(x,y);
		dr=_mm256_add_ps(_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dx),_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dy));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_min_ps(x,y);
		dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_min_ps(x,y);
		dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::power_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_pow_ps(x,y);
		dr=_mm256_add_ps(_mm256_mul_ps(_mm256_mul_ps(_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f))),y),dx),_mm256_mul_ps(_mm256_mul_ps(_mm256_log_ps(x),r),dy));
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::power_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::power_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_pow_ps(x,y);
		dr=_mm256_mul_ps(_mm256_mul_ps(_mm256_log_ps(x),r),dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::power_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, y, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_pow_ps(x,y);
		dr=_mm256_mul_ps(_mm256_mul_ps(_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f))),y),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_add_ps(x,y);
		dr=dx;
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_sub_ps(x,y);
		dr=dx;
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_subtract_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_subtract_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_sub_ps(x,y);
		dr=_mm256_sub_ps(_mm256_set1_ps(0.0),dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_mul_ps(x,y);
		dr=_mm256_mul_ps(y,dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_div_ps(x,y);
		dr=_mm256_div_ps(dx,y);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_divide_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_divide_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_div_ps(x,y);
		dr=_mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),dy),y);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_max_ps(x,y);
		dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_min_ps(x,y);
		dr=_mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 x, dx, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		dx=_mm256_load_ps(m_dx + i);
		r=_mm256_pow_ps(x,y);
		dr=_mm256_mul_ps(_mm256_mul_ps(_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f))),y),dx);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_power_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_power_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m256 y, dy, r, dr;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		dy=_mm256_load_ps(m_dy + i);
		r=_mm256_pow_ps(x,y);
		dr=_mm256_mul_ps(_mm256_mul_ps(_mm256_log_ps(x),r),dy);
		_mm256_stream_ps(m_r + i, r);
		_mm256_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<__m128*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m256*>::equal_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::equal_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, wr);
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::squareroot_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::squareroot_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 r, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(_mm256_mul_ps(wr,_mm256_set1_ps(0.5f)),r));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::change_sign_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::change_sign_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_sub_ps(wx, wr);
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::exponential_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::exponential_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 r, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,r));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,x));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm2_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm2_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_mul_ps(x,_mm256_set1_ps(0.69314718055994529f))));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm10_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::logarithm10_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_mul_ps(x,_mm256_set1_ps(2.3025850929940459f))));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::complementary_errorfunc_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::complementary_errorfunc_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_sub_ps(wx, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_exp_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),x),x))),_mm256_set1_ps(1.1283791670955126f)));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,_mm256_cos_ps(x)));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),wr),_mm256_sin_ps(x)));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_mul_ps(_mm256_cos_ps(x),_mm256_cos_ps(x))));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_sqrt_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(x,x)))));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),wr),_mm256_sqrt_ps(_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(x,x)))));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::arc_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,_mm256_add_ps(_mm256_mul_ps(x,x),_mm256_set1_ps(1.0f))));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,_mm256_cosh_ps(x)));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,_mm256_sinh_ps(x)));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::hyperbolic_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 r, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(wr,_mm256_sub_ps(_mm256_set1_ps(1.0f), _mm256_mul_ps(r,r))));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m256*>::add_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::add_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256 wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, wr);
		_mm256_stream_ps(m_wx + i, wx);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, wr);
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::add_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::add_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, wr);
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::add_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, wr);
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256 wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, wr);
		_mm256_stream_ps(m_wx + i, wx);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_sub_ps(wy, wr);
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_sub_ps(wy, wr);
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, wr);
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256 x, y, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(y,wr));
		_mm256_stream_ps(m_wx + i, wx);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(x,wr));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 x, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(x,wr));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(y,wr));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::divide_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256 y, r, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,y));
		_mm256_stream_ps(m_wx + i, wx);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),wr),y));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::divide_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::divide_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 y, r, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),wr),y));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::divide_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,y));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256 x, y, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
		_mm256_stream_ps(m_wx + i, wx);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 x, y, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256 x, y, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
		_mm256_stream_ps(m_wx + i, wx);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 x, y, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::power_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m256 x, y, r, wr, wx, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f)))),y));
		_mm256_stream_ps(m_wx + i, wx);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_log_ps(x)),r));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::power_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::power_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 x, r, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_log_ps(x)),r));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::power_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, y, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		y=_mm256_load_ps(m_y + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_mul_ps(wr,_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f)))),y));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::add_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, wr);
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::subtract_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, wr);
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_subtract_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_subtract_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_sub_ps(wy, wr);
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::multiply_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(y,wr));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::divide_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_div_ps(wr,y));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_divide_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_divide_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 y, r, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		y=_mm256_load_ps(m_y + i);
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_div_ps(_mm256_mul_ps(_mm256_sub_ps(_mm256_set1_ps(0.0),r),wr),y));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::maximum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(x,y)),wr));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::minimum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_hss_ps(_mm256_sub_ps(y,x)),wr));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::power_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 y = _mm256_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m256 x, wr, wx;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		x=_mm256_load_ps(m_x + i);
		wr=_mm256_load_ps(m_wr + i);
		wx=_mm256_load_ps(m_wx + i);
		wx=_mm256_add_ps(wx, _mm256_mul_ps(_mm256_mul_ps(_mm256_pow_ps(x,_mm256_sub_ps(y,_mm256_set1_ps(1.0f))),y),wr));
		_mm256_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<__m128*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_power_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m256*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m256*>::scalar_power_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m256 x = _mm256_set1_ps(_x);
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m256 r, wr, wy;

	if (n >= 8) for (; i < n - 7; i += 8)
	{
		r=_mm256_load_ps(m_r + i);
		wr=_mm256_load_ps(m_wr + i);
		wy=_mm256_load_ps(m_wy + i);
		wy=_mm256_add_ps(wy, _mm256_mul_ps(_mm256_mul_ps(_mm256_log_ps(x),r),wr));
		_mm256_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<__m128*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::equal_scalar(float* _r, const float& _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::equal_scalar(float* _r, const float& _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	float *m_r = _r + offset;
	__m128 r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=x;
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::equal_scalar(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::equal(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::equal(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=x;
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::squareroot(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::squareroot(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_sqrt_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::change_sign(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::change_sign(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_sub_ps(_mm_set1_ps(0.0),x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::ceiling(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::ceiling(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_ceil_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::flooring(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::flooring(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_floor_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::heaviside_step(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::heaviside_step(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_hss_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::exponential(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::exponential(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_exp_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_log_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm2(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm2(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_log2_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm10(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm10(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_log10_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::complementary_errorfunc(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::complementary_errorfunc(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_erfc_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_sin_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_cos_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_tan_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::arc_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::arc_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_asin_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::arc_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::arc_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_acos_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::arc_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::arc_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_atan_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_sinh_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_cosh_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_tanh_ps(x);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<__m128*>::add(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		r=_mm_add_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		r=_mm_sub_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		r=_mm_mul_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		r=_mm_div_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		r=_mm_max_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		r=_mm_min_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 x, y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		r=_mm_pow_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_add_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::add_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_sub_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::subtract_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_subtract(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_subtract(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		r=_mm_sub_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::scalar_subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_mul_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::multiply_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_div_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::divide_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_divide(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_divide(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		r=_mm_div_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::scalar_divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_max_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::maximum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_min_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::minimum_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_scalar(float* _r, const float* _x, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset;
	float *m_r = _r + offset;
	__m128 x, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_pow_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::power_scalar(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_power(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_power(float* _r, const float& _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_y = _y + offset;
	float *m_r = _r + offset;
	__m128 y, r;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		r=_mm_pow_ps(x,y);
		_mm_stream_ps(m_r + i, r);
	}

	graph_op_traits<float*>::scalar_power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<__m128*>::equal_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::equal_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=x;
		dr=dx;
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::squareroot_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::squareroot_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_sqrt_ps(x);
		dr=_mm_div_ps(_mm_mul_ps(dx,_mm_set1_ps(0.5f)),r);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::change_sign_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::change_sign_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_sub_ps(_mm_set1_ps(0.0),x);
		dr=_mm_sub_ps(_mm_set1_ps(0.0),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::ceiling_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::ceiling_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_ceil_ps(x);
		dr=_mm_set1_ps(0.0);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::flooring_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::flooring_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_floor_ps(x);
		dr=_mm_set1_ps(0.0);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::heaviside_step_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::heaviside_step_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_hss_ps(x);
		dr=_mm_set1_ps(0.0);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::exponential_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::exponential_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_exp_ps(x);
		dr=_mm_mul_ps(r,dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_log_ps(x);
		dr=_mm_div_ps(dx,x);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm2_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm2_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_log2_ps(x);
		dr=_mm_div_ps(dx,_mm_mul_ps(x,_mm_set1_ps(0.69314718055994529f)));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm10_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm10_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_log10_ps(x);
		dr=_mm_div_ps(dx,_mm_mul_ps(x,_mm_set1_ps(2.3025850929940459f)));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::complementary_errorfunc_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::complementary_errorfunc_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_erfc_ps(x);
		dr=_mm_sub_ps(_mm_set1_ps(0.0),_mm_mul_ps(_mm_mul_ps(_mm_exp_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),x),x)),_mm_set1_ps(1.1283791670955126f)),dx));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_sin_ps(x);
		dr=_mm_mul_ps(_mm_cos_ps(x),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_cos_ps(x);
		dr=_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),_mm_sin_ps(x)),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_tan_ps(x);
		dr=_mm_div_ps(dx,_mm_mul_ps(_mm_cos_ps(x),_mm_cos_ps(x)));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_asin_ps(x);
		dr=_mm_div_ps(dx,_mm_sqrt_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(x,x))));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_acos_ps(x);
		dr=_mm_div_ps(_mm_sub_ps(_mm_set1_ps(0.0),dx),_mm_sqrt_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(x,x))));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_atan_ps(x);
		dr=_mm_div_ps(dx,_mm_add_ps(_mm_mul_ps(x,x),_mm_set1_ps(1.0f)));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_sinh_ps(x);
		dr=_mm_mul_ps(_mm_cosh_ps(x),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_cosh_ps(x);
		dr=_mm_mul_ps(_mm_sinh_ps(x),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_tanh_ps(x);
		dr=_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(r,r)),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<__m128*>::add_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::add_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_add_ps(x,y);
		dr=_mm_add_ps(dx,dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::add_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::add_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_add_ps(x,y);
		dr=dy;
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::add_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_add_ps(x,y);
		dr=dx;
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_sub_ps(x,y);
		dr=_mm_sub_ps(dx,dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_sub_ps(x,y);
		dr=_mm_sub_ps(_mm_set1_ps(0.0),dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_sub_ps(x,y);
		dr=dx;
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_mul_ps(x,y);
		dr=_mm_add_ps(_mm_mul_ps(y,dx),_mm_mul_ps(x,dy));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_mul_ps(x,y);
		dr=_mm_mul_ps(x,dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_mul_ps(x,y);
		dr=_mm_mul_ps(y,dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::divide_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_div_ps(x,y);
		dr=_mm_div_ps(_mm_sub_ps(dx,_mm_mul_ps(r,dy)),y);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::divide_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::divide_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_div_ps(x,y);
		dr=_mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),dy),y);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::divide_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_div_ps(x,y);
		dr=_mm_div_ps(dx,y);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_max_ps(x,y);
		dr=_mm_add_ps(_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dx),_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dy));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_max_ps(x,y);
		dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_max_ps(x,y);
		dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_min_ps(x,y);
		dr=_mm_add_ps(_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dx),_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dy));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_min_ps(x,y);
		dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_min_ps(x,y);
		dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::power_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_pow_ps(x,y);
		dr=_mm_add_ps(_mm_mul_ps(_mm_mul_ps(_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f))),y),dx),_mm_mul_ps(_mm_mul_ps(_mm_log_ps(x),r),dy));
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::power_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::power_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_pow_ps(x,y);
		dr=_mm_mul_ps(_mm_mul_ps(_mm_log_ps(x),r),dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::power_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, y, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_pow_ps(x,y);
		dr=_mm_mul_ps(_mm_mul_ps(_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f))),y),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_add_ps(x,y);
		dr=dx;
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::add_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_sub_ps(x,y);
		dr=dx;
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::subtract_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_subtract_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_subtract_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_sub_ps(x,y);
		dr=_mm_sub_ps(_mm_set1_ps(0.0),dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::scalar_subtract_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_mul_ps(x,y);
		dr=_mm_mul_ps(y,dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::multiply_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_div_ps(x,y);
		dr=_mm_div_ps(dx,y);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::divide_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_divide_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_divide_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_div_ps(x,y);
		dr=_mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),dy),y);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::scalar_divide_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_max_ps(x,y);
		dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::maximum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_min_ps(x,y);
		dr=_mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::minimum_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_dx = _dx + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 x, dx, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		dx=_mm_load_ps(m_dx + i);
		r=_mm_pow_ps(x,y);
		dr=_mm_mul_ps(_mm_mul_ps(_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f))),y),dx);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::power_scalar_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_power_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_power_forward(float* _r, float* _dr, const float& _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_y = _y + offset, *m_dy = _dy + offset;
	float *m_r = _r + offset, *m_dr = _dr + offset;
	__m128 y, dy, r, dr;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		dy=_mm_load_ps(m_dy + i);
		r=_mm_pow_ps(x,y);
		dr=_mm_mul_ps(_mm_mul_ps(_mm_log_ps(x),r),dy);
		_mm_stream_ps(m_r + i, r);
		_mm_stream_ps(m_dr + i, dr);
	}

	graph_op_traits<float*>::scalar_power_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<__m128*>::equal_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::equal_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, wr);
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::squareroot_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::squareroot_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 r, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(_mm_mul_ps(wr,_mm_set1_ps(0.5f)),r));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::change_sign_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::change_sign_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_sub_ps(wx, wr);
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::exponential_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::exponential_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 r, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(wr,r));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,x));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm2_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm2_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_mul_ps(x,_mm_set1_ps(0.69314718055994529f))));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm10_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::logarithm10_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_mul_ps(x,_mm_set1_ps(2.3025850929940459f))));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::complementary_errorfunc_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::complementary_errorfunc_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_sub_ps(wx, _mm_mul_ps(_mm_mul_ps(wr,_mm_exp_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),x),x))),_mm_set1_ps(1.1283791670955126f)));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(wr,_mm_cos_ps(x)));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),wr),_mm_sin_ps(x)));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_mul_ps(_mm_cos_ps(x),_mm_cos_ps(x))));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_sqrt_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(x,x)))));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(_mm_sub_ps(_mm_set1_ps(0.0),wr),_mm_sqrt_ps(_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(x,x)))));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::arc_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,_mm_add_ps(_mm_mul_ps(x,x),_mm_set1_ps(1.0f))));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(wr,_mm_cosh_ps(x)));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(wr,_mm_sinh_ps(x)));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::hyperbolic_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 r, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(wr,_mm_sub_ps(_mm_set1_ps(1.0f), _mm_mul_ps(r,r))));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<__m128*>::add_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::add_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128 wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, wr);
		_mm_stream_ps(m_wx + i, wx);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, wr);
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::add_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::add_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, wr);
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::add_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, wr);
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128 wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, wr);
		_mm_stream_ps(m_wx + i, wx);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_sub_ps(wy, wr);
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_sub_ps(wy, wr);
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, wr);
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128 x, y, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(y,wr));
		_mm_stream_ps(m_wx + i, wx);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(x,wr));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 x, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(x,wr));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(y,wr));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::divide_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128 y, r, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,y));
		_mm_stream_ps(m_wx + i, wx);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),wr),y));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::divide_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::divide_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 y, r, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),wr),y));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::divide_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,y));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128 x, y, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
		_mm_stream_ps(m_wx + i, wx);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 x, y, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128 x, y, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
		_mm_stream_ps(m_wx + i, wx);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 x, y, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::power_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset, *m_wy = _wy + offset;
	__m128 x, y, r, wr, wx, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_mul_ps(wr,_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f)))),y));
		_mm_stream_ps(m_wx + i, wx);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(_mm_mul_ps(wr,_mm_log_ps(x)),r));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::power_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::power_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 x, r, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(_mm_mul_ps(wr,_mm_log_ps(x)),r));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::power_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *m_x = _x + offset, *m_y = _y + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, y, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		y=_mm_load_ps(m_y + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_mul_ps(wr,_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f)))),y));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::add_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, wr);
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::add_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::subtract_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, wr);
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::subtract_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_subtract_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_subtract_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_sub_ps(wy, wr);
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::scalar_subtract_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::multiply_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(y,wr));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::multiply_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::divide_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_div_ps(wr,y));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::divide_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_divide_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_divide_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_y = _y + offset, *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 y, r, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		y=_mm_load_ps(m_y + i);
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_div_ps(_mm_mul_ps(_mm_sub_ps(_mm_set1_ps(0.0),r),wr),y));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::scalar_divide_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::maximum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(x,y)),wr));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::maximum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::minimum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_hss_ps(_mm_sub_ps(y,x)),wr));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::minimum_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::power_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 y = _mm_set1_ps(_y);
	const float *m_x = _x + offset, *m_wr = _wr + offset;
	float *m_wx = _wx + offset;
	__m128 x, wr, wx;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		x=_mm_load_ps(m_x + i);
		wr=_mm_load_ps(m_wr + i);
		wx=_mm_load_ps(m_wx + i);
		wx=_mm_add_ps(wx, _mm_mul_ps(_mm_mul_ps(_mm_pow_ps(x,_mm_sub_ps(y,_mm_set1_ps(1.0f))),y),wr));
		_mm_stream_ps(m_wx + i, wx);
	}

	graph_op_traits<float*>::power_scalar_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_power_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<__m128*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<__m128*>::scalar_power_backward(const float* _r, const float* _wr, const float& _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const __m128 x = _mm_set1_ps(_x);
	const float *m_r = _r + offset, *m_wr = _wr + offset;
	float *m_wy = _wy + offset;
	__m128 r, wr, wy;

	if (n >= 4) for (; i < n - 3; i += 4)
	{
		r=_mm_load_ps(m_r + i);
		wr=_mm_load_ps(m_wr + i);
		wy=_mm_load_ps(m_wy + i);
		wy=_mm_add_ps(wy, _mm_mul_ps(_mm_mul_ps(_mm_log_ps(x),r),wr));
		_mm_stream_ps(m_wy + i, wy);
	}

	graph_op_traits<float*>::scalar_power_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::equal_scalar(float* _r, const float& x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::equal_scalar(_r, x, offset, n, i);
}

void graph_op_traits<float*>::equal_scalar(float* _r, const float& x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x;
}

void graph_op_traits<float*>::equal(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::equal(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::equal(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i];
}

void graph_op_traits<float*>::squareroot(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::squareroot(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::squareroot(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::sqrt(x[i]);
}

void graph_op_traits<float*>::change_sign(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::change_sign(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::change_sign(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=-x[i];
}

void graph_op_traits<float*>::ceiling(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::ceiling(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::ceiling(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::ceil(x[i]);
}

void graph_op_traits<float*>::flooring(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::flooring(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::flooring(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::floor(x[i]);
}

void graph_op_traits<float*>::heaviside_step(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::heaviside_step(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::heaviside_step(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=hss(x[i]);
}

void graph_op_traits<float*>::exponential(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::exponential(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::exponential(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::exp(x[i]);
}

void graph_op_traits<float*>::logarithm(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::logarithm(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::log(x[i]);
}

void graph_op_traits<float*>::logarithm2(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm2(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::logarithm2(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::log2(x[i]);
}

void graph_op_traits<float*>::logarithm10(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm10(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::logarithm10(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::log10(x[i]);
}

void graph_op_traits<float*>::complementary_errorfunc(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::complementary_errorfunc(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::complementary_errorfunc(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::erfc(x[i]);
}

void graph_op_traits<float*>::sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::sine(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::sin(x[i]);
}

void graph_op_traits<float*>::cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::cosine(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::cos(x[i]);
}

void graph_op_traits<float*>::tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::tangent(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::tan(x[i]);
}

void graph_op_traits<float*>::arc_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_sine(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::arc_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::asin(x[i]);
}

void graph_op_traits<float*>::arc_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::arc_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::acos(x[i]);
}

void graph_op_traits<float*>::arc_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::arc_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::atan(x[i]);
}

void graph_op_traits<float*>::hyperbolic_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_sine(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_sine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::sinh(x[i]);
}

void graph_op_traits<float*>::hyperbolic_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_cosine(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_cosine(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::cosh(x[i]);
}

void graph_op_traits<float*>::hyperbolic_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_tangent(_r, _x, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_tangent(float* _r, const float* _x, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::tanh(x[i]);
}

void graph_op_traits<float*>::add(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add(_r, _x, _y, offset, n, i);
}

void graph_op_traits<float*>::add(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]+y[i];
}

void graph_op_traits<float*>::subtract(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract(_r, _x, _y, offset, n, i);
}

void graph_op_traits<float*>::subtract(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]-y[i];
}

void graph_op_traits<float*>::multiply(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply(_r, _x, _y, offset, n, i);
}

void graph_op_traits<float*>::multiply(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]*y[i];
}

void graph_op_traits<float*>::divide(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide(_r, _x, _y, offset, n, i);
}

void graph_op_traits<float*>::divide(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]/y[i];
}

void graph_op_traits<float*>::maximum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<float*>::maximum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::max(x[i],y[i]);
}

void graph_op_traits<float*>::minimum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum(_r, _x, _y, offset, n, i);
}

void graph_op_traits<float*>::minimum(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::min(x[i],y[i]);
}

void graph_op_traits<float*>::power(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power(_r, _x, _y, offset, n, i);
}

void graph_op_traits<float*>::power(float* _r, const float* _x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::pow(x[i],y[i]);
}

void graph_op_traits<float*>::add_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<float*>::add_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]+y;
}

void graph_op_traits<float*>::subtract_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<float*>::subtract_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]-y;
}

void graph_op_traits<float*>::scalar_subtract(float* _r, const float& x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_subtract(_r, x, _y, offset, n, i);
}

void graph_op_traits<float*>::scalar_subtract(float* _r, const float& x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x-y[i];
}

void graph_op_traits<float*>::multiply_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<float*>::multiply_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]*y;
}

void graph_op_traits<float*>::divide_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<float*>::divide_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x[i]/y;
}

void graph_op_traits<float*>::scalar_divide(float* _r, const float& x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_divide(_r, x, _y, offset, n, i);
}

void graph_op_traits<float*>::scalar_divide(float* _r, const float& x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=x/y[i];
}

void graph_op_traits<float*>::maximum_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<float*>::maximum_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::max(x[i],y);
}

void graph_op_traits<float*>::minimum_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<float*>::minimum_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::min(x[i],y);
}

void graph_op_traits<float*>::power_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_scalar(_r, _x, y, offset, n, i);
}

void graph_op_traits<float*>::power_scalar(float* _r, const float* _x, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::pow(x[i],y);
}

void graph_op_traits<float*>::scalar_power(float* _r, const float& x, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_power(_r, x, _y, offset, n, i);
}

void graph_op_traits<float*>::scalar_power(float* _r, const float& x, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset;
	float *r = _r + offset;

	for (; i < n; ++i)
		r[i]=std::pow(x,y[i]);
}

void graph_op_traits<float*>::equal_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::equal_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::equal_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i];
		dr[i]=dx[i];
	}
}

void graph_op_traits<float*>::squareroot_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::squareroot_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::squareroot_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::sqrt(x[i]);
		dr[i]=dx[i]*0.5f/r[i];
	}
}

void graph_op_traits<float*>::change_sign_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::change_sign_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::change_sign_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=-x[i];
		dr[i]=-dx[i];
	}
}

void graph_op_traits<float*>::ceiling_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::ceiling_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::ceiling_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::ceil(x[i]);
		dr[i]=0;
	}
}

void graph_op_traits<float*>::flooring_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::flooring_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::flooring_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::floor(x[i]);
		dr[i]=0;
	}
}

void graph_op_traits<float*>::heaviside_step_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::heaviside_step_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::heaviside_step_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=hss(x[i]);
		dr[i]=0;
	}
}

void graph_op_traits<float*>::exponential_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::exponential_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::exponential_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::exp(x[i]);
		dr[i]=r[i]*dx[i];
	}
}

void graph_op_traits<float*>::logarithm_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::logarithm_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::log(x[i]);
		dr[i]=dx[i]/x[i];
	}
}

void graph_op_traits<float*>::logarithm2_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm2_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::logarithm2_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::log2(x[i]);
		dr[i]=dx[i]/(x[i]*0.69314718055994529f);
	}
}

void graph_op_traits<float*>::logarithm10_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm10_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::logarithm10_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::log10(x[i]);
		dr[i]=dx[i]/(x[i]*2.3025850929940459f);
	}
}

void graph_op_traits<float*>::complementary_errorfunc_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::complementary_errorfunc_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::complementary_errorfunc_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::erfc(x[i]);
		dr[i]=-std::exp(-x[i]*x[i])*1.1283791670955126f*dx[i];
	}
}

void graph_op_traits<float*>::sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::sin(x[i]);
		dr[i]=std::cos(x[i])*dx[i];
	}
}

void graph_op_traits<float*>::cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::cos(x[i]);
		dr[i]=-std::sin(x[i])*dx[i];
	}
}

void graph_op_traits<float*>::tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::tan(x[i]);
		dr[i]=dx[i]/(std::cos(x[i])*std::cos(x[i]));
	}
}

void graph_op_traits<float*>::arc_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::arc_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::asin(x[i]);
		dr[i]=dx[i]/std::sqrt(1.0f-x[i]*x[i]);
	}
}

void graph_op_traits<float*>::arc_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::arc_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::acos(x[i]);
		dr[i]=-dx[i]/std::sqrt(1.0f-x[i]*x[i]);
	}
}

void graph_op_traits<float*>::arc_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::arc_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::atan(x[i]);
		dr[i]=dx[i]/(x[i]*x[i]+1.0f);
	}
}

void graph_op_traits<float*>::hyperbolic_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_sine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_sine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::sinh(x[i]);
		dr[i]=std::cosh(x[i])*dx[i];
	}
}

void graph_op_traits<float*>::hyperbolic_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_cosine_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_cosine_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::cosh(x[i]);
		dr[i]=std::sinh(x[i])*dx[i];
	}
}

void graph_op_traits<float*>::hyperbolic_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_tangent_forward(_r, _dr, _x, _dx, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_tangent_forward(float* _r, float* _dr, const float* _x, const float* _dx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::tanh(x[i]);
		dr[i]=(1.0f-r[i]*r[i])*dx[i];
	}
}

void graph_op_traits<float*>::add_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::add_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]+y[i];
		dr[i]=dx[i]+dy[i];
	}
}

void graph_op_traits<float*>::add_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::add_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]+y[i];
		dr[i]=dy[i];
	}
}

void graph_op_traits<float*>::add_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<float*>::add_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]+y[i];
		dr[i]=dx[i];
	}
}

void graph_op_traits<float*>::subtract_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::subtract_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]-y[i];
		dr[i]=dx[i]-dy[i];
	}
}

void graph_op_traits<float*>::subtract_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::subtract_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]-y[i];
		dr[i]=-dy[i];
	}
}

void graph_op_traits<float*>::subtract_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<float*>::subtract_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]-y[i];
		dr[i]=dx[i];
	}
}

void graph_op_traits<float*>::multiply_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::multiply_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]*y[i];
		dr[i]=y[i]*dx[i]+x[i]*dy[i];
	}
}

void graph_op_traits<float*>::multiply_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::multiply_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]*y[i];
		dr[i]=x[i]*dy[i];
	}
}

void graph_op_traits<float*>::multiply_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<float*>::multiply_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]*y[i];
		dr[i]=y[i]*dx[i];
	}
}

void graph_op_traits<float*>::divide_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::divide_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]/y[i];
		dr[i]=(dx[i]-r[i]*dy[i])/y[i];
	}
}

void graph_op_traits<float*>::divide_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::divide_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]/y[i];
		dr[i]=-r[i]*dy[i]/y[i];
	}
}

void graph_op_traits<float*>::divide_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<float*>::divide_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]/y[i];
		dr[i]=dx[i]/y[i];
	}
}

void graph_op_traits<float*>::maximum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::maximum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::max(x[i],y[i]);
		dr[i]=hss(x[i]-y[i])*dx[i]+hss(y[i]-x[i])*dy[i];
	}
}

void graph_op_traits<float*>::maximum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::maximum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::max(x[i],y[i]);
		dr[i]=hss(y[i]-x[i])*dy[i];
	}
}

void graph_op_traits<float*>::maximum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<float*>::maximum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::max(x[i],y[i]);
		dr[i]=hss(x[i]-y[i])*dx[i];
	}
}

void graph_op_traits<float*>::minimum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::minimum_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::min(x[i],y[i]);
		dr[i]=hss(y[i]-x[i])*dx[i]+hss(x[i]-y[i])*dy[i];
	}
}

void graph_op_traits<float*>::minimum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::minimum_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::min(x[i],y[i]);
		dr[i]=hss(x[i]-y[i])*dy[i];
	}
}

void graph_op_traits<float*>::minimum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<float*>::minimum_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::min(x[i],y[i]);
		dr[i]=hss(y[i]-x[i])*dx[i];
	}
}

void graph_op_traits<float*>::power_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_forward(_r, _dr, _x, _dx, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::power_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x[i],y[i]);
		dr[i]=std::pow(x[i],y[i]-1.0f)*y[i]*dx[i]+std::log(x[i])*r[i]*dy[i];
	}
}

void graph_op_traits<float*>::power_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_px_forward(_r, _dr, _x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::power_px_forward(float* _r, float* _dr, const float* _x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x[i],y[i]);
		dr[i]=std::log(x[i])*r[i]*dy[i];
	}
}

void graph_op_traits<float*>::power_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_py_forward(_r, _dr, _x, _dx, _y, offset, n, i);
}

void graph_op_traits<float*>::power_py_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x[i],y[i]);
		dr[i]=std::pow(x[i],y[i]-1.0f)*y[i]*dx[i];
	}
}

void graph_op_traits<float*>::add_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<float*>::add_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]+y;
		dr[i]=dx[i];
	}
}

void graph_op_traits<float*>::subtract_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<float*>::subtract_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]-y;
		dr[i]=dx[i];
	}
}

void graph_op_traits<float*>::scalar_subtract_forward(float* _r, float* _dr, const float& x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_subtract_forward(_r, _dr, x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::scalar_subtract_forward(float* _r, float* _dr, const float& x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x-y[i];
		dr[i]=-dy[i];
	}
}

void graph_op_traits<float*>::multiply_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<float*>::multiply_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]*y;
		dr[i]=y*dx[i];
	}
}

void graph_op_traits<float*>::divide_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<float*>::divide_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x[i]/y;
		dr[i]=dx[i]/y;
	}
}

void graph_op_traits<float*>::scalar_divide_forward(float* _r, float* _dr, const float& x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_divide_forward(_r, _dr, x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::scalar_divide_forward(float* _r, float* _dr, const float& x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=x/y[i];
		dr[i]=-r[i]*dy[i]/y[i];
	}
}

void graph_op_traits<float*>::maximum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<float*>::maximum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::max(x[i],y);
		dr[i]=hss(x[i]-y)*dx[i];
	}
}

void graph_op_traits<float*>::minimum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<float*>::minimum_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::min(x[i],y);
		dr[i]=hss(y-x[i])*dx[i];
	}
}

void graph_op_traits<float*>::power_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_scalar_forward(_r, _dr, _x, _dx, y, offset, n, i);
}

void graph_op_traits<float*>::power_scalar_forward(float* _r, float* _dr, const float* _x, const float* _dx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *dx = _dx + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x[i],y);
		dr[i]=std::pow(x[i],y-1.0f)*y*dx[i];
	}
}

void graph_op_traits<float*>::scalar_power_forward(float* _r, float* _dr, const float& x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_power_forward(_r, _dr, x, _y, _dy, offset, n, i);
}

void graph_op_traits<float*>::scalar_power_forward(float* _r, float* _dr, const float& x, const float* _y, const float* _dy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset, *dy = _dy + offset;
	float *r = _r + offset, *dr = _dr + offset;

	for (; i < n; ++i)
	{
		r[i]=std::pow(x,y[i]);
		dr[i]=std::log(x)*r[i]*dy[i];
	}
}

void graph_op_traits<float*>::equal_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::equal_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::equal_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<float*>::squareroot_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::squareroot_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::squareroot_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *r = _r + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*0.5f/r[i];
}

void graph_op_traits<float*>::change_sign_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::change_sign_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::change_sign_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]-=wr[i];
}

void graph_op_traits<float*>::exponential_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::exponential_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::exponential_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *r = _r + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*r[i];
}

void graph_op_traits<float*>::logarithm_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::logarithm_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/x[i];
}

void graph_op_traits<float*>::logarithm2_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm2_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::logarithm2_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/(x[i]*0.69314718055994529f);
}

void graph_op_traits<float*>::logarithm10_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::logarithm10_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::logarithm10_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/(x[i]*2.3025850929940459f);
}

void graph_op_traits<float*>::complementary_errorfunc_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::complementary_errorfunc_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::complementary_errorfunc_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]-=wr[i]*std::exp(-x[i]*x[i])*1.1283791670955126f;
}

void graph_op_traits<float*>::sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*std::cos(x[i]);
}

void graph_op_traits<float*>::cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=-wr[i]*std::sin(x[i]);
}

void graph_op_traits<float*>::tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/(std::cos(x[i])*std::cos(x[i]));
}

void graph_op_traits<float*>::arc_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::arc_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/std::sqrt(1.0f-x[i]*x[i]);
}

void graph_op_traits<float*>::arc_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::arc_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=-wr[i]/std::sqrt(1.0f-x[i]*x[i]);
}

void graph_op_traits<float*>::arc_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::arc_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::arc_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/(x[i]*x[i]+1.0f);
}

void graph_op_traits<float*>::hyperbolic_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_sine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_sine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*std::cosh(x[i]);
}

void graph_op_traits<float*>::hyperbolic_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_cosine_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_cosine_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*std::sinh(x[i]);
}

void graph_op_traits<float*>::hyperbolic_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::hyperbolic_tangent_backward(_r, _wr, _x, _wx, offset, n, i);
}

void graph_op_traits<float*>::hyperbolic_tangent_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *r = _r + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*(1.0f-r[i]*r[i]);
}

void graph_op_traits<float*>::add_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::add_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=wr[i];
		wy[i]+=wr[i];
	}
}

void graph_op_traits<float*>::add_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::add_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=wr[i];
}

void graph_op_traits<float*>::add_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<float*>::add_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<float*>::subtract_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::subtract_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=wr[i];
		wy[i]-=wr[i];
	}
}

void graph_op_traits<float*>::subtract_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::subtract_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]-=wr[i];
}

void graph_op_traits<float*>::subtract_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<float*>::subtract_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<float*>::multiply_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::multiply_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	float *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=y[i]*wr[i];
		wy[i]+=x[i]*wr[i];
	}
}

void graph_op_traits<float*>::multiply_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::multiply_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=x[i]*wr[i];
}

void graph_op_traits<float*>::multiply_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<float*>::multiply_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=y[i]*wr[i];
}

void graph_op_traits<float*>::divide_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::divide_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset, *r = _r + offset, *wr = _wr + offset;
	float *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=wr[i]/y[i];
		wy[i]+=-r[i]*wr[i]/y[i];
	}
}

void graph_op_traits<float*>::divide_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::divide_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset, *r = _r + offset, *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=-r[i]*wr[i]/y[i];
}

void graph_op_traits<float*>::divide_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<float*>::divide_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/y[i];
}

void graph_op_traits<float*>::maximum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::maximum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	float *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=hss(x[i]-y[i])*wr[i];
		wy[i]+=hss(y[i]-x[i])*wr[i];
	}
}

void graph_op_traits<float*>::maximum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::maximum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=hss(y[i]-x[i])*wr[i];
}

void graph_op_traits<float*>::maximum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<float*>::maximum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=hss(x[i]-y[i])*wr[i];
}

void graph_op_traits<float*>::minimum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::minimum_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	float *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=hss(y[i]-x[i])*wr[i];
		wy[i]+=hss(x[i]-y[i])*wr[i];
	}
}

void graph_op_traits<float*>::minimum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::minimum_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=hss(x[i]-y[i])*wr[i];
}

void graph_op_traits<float*>::minimum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<float*>::minimum_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=hss(y[i]-x[i])*wr[i];
}

void graph_op_traits<float*>::power_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_backward(_r, _wr, _x, _wx, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::power_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *r = _r + offset, *wr = _wr + offset;
	float *wx = _wx + offset, *wy = _wy + offset;

	for (; i < n; ++i)
	{
		wx[i]+=wr[i]*std::pow(x[i],y[i]-1.0f)*y[i];
		wy[i]+=wr[i]*std::log(x[i])*r[i];
	}
}

void graph_op_traits<float*>::power_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_px_backward(_r, _wr, _x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::power_px_backward(const float* _r, const float* _wr, const float* _x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *r = _r + offset, *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=wr[i]*std::log(x[i])*r[i];
}

void graph_op_traits<float*>::power_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_py_backward(_r, _wr, _x, _wx, _y, offset, n, i);
}

void graph_op_traits<float*>::power_py_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float* _y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *y = _y + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]*std::pow(x[i],y[i]-1.0f)*y[i];
}

void graph_op_traits<float*>::add_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::add_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<float*>::add_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<float*>::subtract_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::subtract_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<float*>::subtract_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i];
}

void graph_op_traits<float*>::scalar_subtract_backward(const float* _r, const float* _wr, const float& x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_subtract_backward(_r, _wr, x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::scalar_subtract_backward(const float* _r, const float* _wr, const float& x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]-=wr[i];
}

void graph_op_traits<float*>::multiply_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::multiply_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<float*>::multiply_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=y*wr[i];
}

void graph_op_traits<float*>::divide_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::divide_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<float*>::divide_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=wr[i]/y;
}

void graph_op_traits<float*>::scalar_divide_backward(const float* _r, const float* _wr, const float& x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_divide_backward(_r, _wr, x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::scalar_divide_backward(const float* _r, const float* _wr, const float& x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *y = _y + offset, *r = _r + offset, *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=-r[i]*wr[i]/y[i];
}

void graph_op_traits<float*>::maximum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::maximum_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<float*>::maximum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=hss(x[i]-y)*wr[i];
}

void graph_op_traits<float*>::minimum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::minimum_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<float*>::minimum_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=hss(y-x[i])*wr[i];
}

void graph_op_traits<float*>::power_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::power_scalar_backward(_r, _wr, _x, _wx, y, offset, n, i);
}

void graph_op_traits<float*>::power_scalar_backward(const float* _r, const float* _wr, const float* _x, float* _wx, const float& y, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *x = _x + offset, *wr = _wr + offset;
	float *wx = _wx + offset;

	for (; i < n; ++i)
		wx[i]+=std::pow(x[i],y-1.0f)*y*wr[i];
}

void graph_op_traits<float*>::scalar_power_backward(const float* _r, const float* _wr, const float& x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n)
{
	uint64_t i = 0;
	graph_op_traits<float*>::scalar_power_backward(_r, _wr, x, _y, _wy, offset, n, i);
}

void graph_op_traits<float*>::scalar_power_backward(const float* _r, const float* _wr, const float& x, const float* _y, float* _wy, const uint64_t& offset, const uint64_t& n, uint64_t& i)
{
	const float *r = _r + offset, *wr = _wr + offset;
	float *wy = _wy + offset;

	for (; i < n; ++i)
		wy[i]+=std::log(x)*r[i]*wr[i];
}

//${end}

