#include "qdefines.h"
#include "qgraph_function.h"
#include "qgraph_operation.h"
#include "intrin.h"

template class graph_function<double>;
template class graph_function<float>;
#ifdef INSTANTIATE_AVX512
template class graph_function<__m512d>;
template class graph_function<__m512>;
#endif
template class graph_function<__m256d>;
template class graph_function<__m256>;
template class graph_function<__m128d>;
template class graph_function<__m128>;

template class graph_function<double*>;
template class graph_function<float*>;
#ifdef INSTANTIATE_AVX512
template class graph_function<__m512d*>;
template class graph_function<__m512*>;
#endif
template class graph_function<__m256d*>;
template class graph_function<__m256*>;
template class graph_function<__m128d*>;
template class graph_function<__m128*>;

template<class T>
graph_function<T>::graph_function(qworkspace_i<T>& ws) :
	m_wksp(ws.wksp()),
	m_integer_wksp(ws.get_integer_wksp()),
	m_boolean_wksp(ws.get_boolean_wksp()),
	m_wksp_index(ws.get_wksp_index()),
	m_integer_wksp_index(ws.get_integer_wksp_index()),
	m_boolean_wksp_index(ws.get_boolean_wksp_index()),
	m_scalar(ws.get_scalar()),
	m_integer(ws.get_integer()),
	m_boolean(ws.get_boolean()),
	m_n(ws.get_n()),
	m_offset(0)
{
}

template<class T>
graph_function<T>::~graph_function() {}

//${begin}
template<class T> void graph_function<T>::equal_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::equal_scalar(m_wksp[m_wksp_index[r_i]], m_scalar[x_i], m_offset, m_n); }
template<class T> void graph_function<T>::equal(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::equal(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::equal_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::equal(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::squareroot(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::squareroot(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::squareroot_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::squareroot(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::change_sign(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::change_sign(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::change_sign_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::change_sign(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::ceiling(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::ceiling(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::ceiling_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::ceiling(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::flooring(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::flooring(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::flooring_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::flooring(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::heaviside_step(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::heaviside_step(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::heaviside_step_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::heaviside_step(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::exponential(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::exponential(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::exponential_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::exponential(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::logarithm(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::logarithm(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::logarithm_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::logarithm(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::logarithm2(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::logarithm2(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::logarithm2_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::logarithm2(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::logarithm10(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::logarithm10(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::logarithm10_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::logarithm10(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::complementary_errorfunc(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::complementary_errorfunc(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::complementary_errorfunc_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::complementary_errorfunc(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::sine(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::sine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::sine_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::sine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::cosine(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::cosine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::cosine_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::cosine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::tangent(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::tangent(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::tangent_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::tangent(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::arc_sine(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::arc_sine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::arc_sine_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::arc_sine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::arc_cosine(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::arc_cosine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::arc_cosine_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::arc_cosine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::arc_tangent(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::arc_tangent(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::arc_tangent_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::arc_tangent(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::hyperbolic_sine(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::hyperbolic_sine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::hyperbolic_sine_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::hyperbolic_sine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::hyperbolic_cosine(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::hyperbolic_cosine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::hyperbolic_cosine_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::hyperbolic_cosine(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::hyperbolic_tangent(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::hyperbolic_tangent(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::hyperbolic_tangent_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::hyperbolic_tangent(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::add(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::add(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::add_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::add(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::add_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::add(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::add_px_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::add(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::subtract(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::subtract(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::subtract_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::subtract(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::subtract_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::subtract(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::subtract_px_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::subtract(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::multiply(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::multiply(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::multiply_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::multiply(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::multiply_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::multiply(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::multiply_px_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::multiply(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::divide(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::divide(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::divide_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::divide(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::divide_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::divide(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::divide_px_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::divide(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::maximum(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::maximum(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::maximum_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::maximum(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::maximum_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::maximum(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::maximum_px_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::maximum(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::minimum(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::minimum(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::minimum_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::minimum(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::minimum_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::minimum(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::minimum_px_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::minimum(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::power(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::power(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::power_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::power(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::power_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::power(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::power_px_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::power(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::add_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::add_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::add_scalar_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::add_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::subtract_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::subtract_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::subtract_scalar_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::subtract_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::scalar_subtract(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::scalar_subtract(m_wksp[m_wksp_index[r_i]], m_scalar[x_i], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::scalar_subtract_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::scalar_subtract(m_wksp[m_wksp_index[r_i]], m_scalar[x_i], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::multiply_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::multiply_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::multiply_scalar_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::multiply_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::divide_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::divide_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::divide_scalar_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::divide_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::scalar_divide(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::scalar_divide(m_wksp[m_wksp_index[r_i]], m_scalar[x_i], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::scalar_divide_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::scalar_divide(m_wksp[m_wksp_index[r_i]], m_scalar[x_i], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::maximum_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::maximum_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::maximum_scalar_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::maximum_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::minimum_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::minimum_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::minimum_scalar_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::minimum_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::power_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::power_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::power_scalar_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::power_scalar(m_wksp[m_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::scalar_power(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::scalar_power(m_wksp[m_wksp_index[r_i]], m_scalar[x_i], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::scalar_power_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::scalar_power(m_wksp[m_wksp_index[r_i]], m_scalar[x_i], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::greater_than(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::greater_than(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::less_than(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::less_than(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::equal_to(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::equal_to(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::greater_than_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::greater_than_scalar(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::less_than_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::less_than_scalar(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::equal_to_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::equal_to_scalar(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::iff(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::iff(m_wksp[m_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::iff_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::iff(m_wksp[m_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::iff_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::iff(m_wksp[m_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::iff_px_py(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::iff(m_wksp[m_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_wksp[m_wksp_index[x_i]], m_wksp[m_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::iff_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::iff_scalar(m_wksp[m_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::iff_scalar_px(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::iff_scalar(m_wksp[m_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_wksp[m_wksp_index[x_i]], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::iff_scalar_scalar(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::iff_scalar_scalar(m_wksp[m_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_scalar[x_i], m_scalar[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_equal_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::integer_equal_int(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer[x_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_equal(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::integer_equal(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_change_sign(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::integer_change_sign(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_add(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_add(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_subtract(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_subtract(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_multiply(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_multiply(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_divide(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_divide(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_add_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_add_int(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_subtract_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_subtract_int(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_int_subtract(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_int_subtract(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer[x_i], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_multiply_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_multiply_int(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_divide_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_divide_int(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_int_divide(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_int_divide(m_integer_wksp[m_integer_wksp_index[r_i]], m_integer[x_i], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_greater_than(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_greater_than(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_less_than(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_less_than(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_equal_to(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_equal_to(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_greater_than_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_greater_than_int(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_less_than_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_less_than_int(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_equal_to_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_equal_to_int(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_iff(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_iff(m_integer_wksp[m_integer_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer_wksp[m_integer_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::integer_iff_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_iff_int(m_integer_wksp[m_integer_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_integer_wksp[m_integer_wksp_index[x_i]], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::integer_iff_int_int(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::integer_iff_int_int(m_integer_wksp[m_integer_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_integer[x_i], m_integer[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_equal_bool(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::boolean_equal_bool(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean[x_i], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_equal(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::boolean_equal(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_not(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i) { graph_op_traits<T>::boolean_not(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_and(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_and(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_or(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_or(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_equal_to(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_equal_to(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_and_bool(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_and_bool(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_boolean[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_or_bool(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_or_bool(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_boolean[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_equal_to_bool(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_equal_to_bool(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_boolean[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_iff(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_iff(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_boolean_wksp[m_boolean_wksp_index[y_i]], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_iff_bool(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_iff_bool(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_boolean_wksp[m_boolean_wksp_index[x_i]], m_boolean[y_i], m_offset, m_n); }
template<class T> void graph_function<T>::boolean_iff_bool_bool(uint64_t clock, const uint64_t& r_i, Operation op, const uint64_t& c_i, const uint64_t& x_i, const uint64_t& y_i) { graph_op_traits<T>::boolean_iff_bool_bool(m_boolean_wksp[m_boolean_wksp_index[r_i]], m_boolean_wksp[m_boolean_wksp_index[c_i]], m_boolean[x_i], m_boolean[y_i], m_offset, m_n); }
//${end}

